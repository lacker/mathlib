/-
Copyright (c) 2020 Oliver Nash. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Oliver Nash
-/
import algebra.lie_algebra
import algebra.ring_quot
import linear_algebra.tensor_algebra

/-!
# Universal enveloping algebra

Given a commutative ring `R` and a Lie algebra `L` over `R`, we construct the universal
enveloping algebra of `L`, together its universal property.

## Main definitions

  * `universal_enveloping_algebra`
  * `universal_enveloping_algebra.algebra`
  * `universal_enveloping_algebra.lift`
  * `universal_enveloping_algebra.ι_comp_lift`
  * `universal_enveloping_algebra.lift_unique`
  * `universal_enveloping_algebra.hom_ext`

## Tags

lie algebra, universal enveloping algebra, tensor algebra
-/

universes u₁ u₂ u₃

variables (R : Type u₁) (L : Type u₂)
variables [comm_ring R] [lie_ring L] [lie_algebra R L]

namespace universal_enveloping_algebra

open tensor_algebra

/-- The quotient by the ideal generated by this relation is the universal enveloping algebra.

Note that we have avoided using the more natural expression:
| lie_compat (x y : L) : rel (ι R L ⁅x, y⁆) ⁅ι R L x, ι R L y⁆
so that our construction needs only the semiring structure of the tensor algebra. -/
inductive rel : tensor_algebra R L → tensor_algebra R L → Prop
| lie_compat (x y : L) : rel ((ι R L ⁅x, y⁆) + (ι R L y) * (ι R L x)) ((ι R L x) * (ι R L y))

end universal_enveloping_algebra

/-- The universal enveloping algebra of a Lie algebra. -/
@[derive [inhabited, semiring, algebra R]]
def universal_enveloping_algebra := ring_quot (universal_enveloping_algebra.rel R L)

namespace universal_enveloping_algebra

instance : ring (universal_enveloping_algebra R L) :=
  algebra.as_ring R (universal_enveloping_algebra R L)

/-- The quotient map from the tensor algebra to the universal enveloping algebra as a morphism of
associative algebras. -/
def mk_alg_hom : tensor_algebra R L →ₐ[R] universal_enveloping_algebra R L :=
ring_quot.mk_alg_hom R (rel R L)

local notation `tι` := tensor_algebra.ι R L

/-- The natural Lie algebra morphism from a Lie algebra to its universal enveloping algebra. -/
def ι : L →ₗ⁅R⁆ universal_enveloping_algebra R L :=
{ map_lie   := λ x y, by
  { suffices : mk_alg_hom R L (tι ⁅x, y⁆ + (tι y) * (tι x)) = mk_alg_hom R L ((tι x) * (tι y)),
    { rw alg_hom.map_mul at this, simp [lie_ring.of_associative_ring_bracket, ← this], },
      exact ring_quot.mk_alg_hom_rel _ (rel.lie_compat x y), },
  ..(mk_alg_hom R L).to_linear_map.comp tι }

variables (A : Type u₃) [ring A] [algebra R A] (f : L →ₗ⁅R⁆ A)

/-- The universal property of the universal enveloping algebra: Lie algebra morphisms into
associative algebras lift to associative algebra morphisms from the universal enveloping algebra. -/
def lift : universal_enveloping_algebra R L →ₐ[R] A :=
ring_quot.lift_alg_hom R (tensor_algebra.lift R L (f : L →ₗ[R] A))
begin
  intros a b h, induction h with x y,
  simp [lie_ring.of_associative_ring_bracket],
end

@[simp] lemma lift_ι_apply (x : L) : lift R L A f (ι R L x) = f x :=
begin
  have : ι R L x = ring_quot.mk_alg_hom R (rel R L) (tι x), { refl, },
  simp [this, lift],
end

lemma ι_comp_lift : (lift R L A f) ∘ (ι R L) = f :=
by { ext, simp, }

lemma lift_unique (g : universal_enveloping_algebra R L →ₐ[R] A) :
  g ∘ (ι R L) = f ↔ g = lift R L A f :=
begin
  split; intros h,
  { apply ring_quot.lift_alg_hom_unique,
    rw ← tensor_algebra.lift_unique,
    ext x,
    change _ = f x, rw ← congr h rfl,
    refl, },
  { subst h, apply ι_comp_lift, },
end

@[ext] lemma hom_ext {g₁ g₂ : universal_enveloping_algebra R L →ₐ[R] A}
  (h : g₁ ∘ (ι R L) = g₂ ∘ (ι R L)) : g₁ = g₂ :=
begin
  let f₁ := (lie_algebra.of_associative_algebra_hom g₁).comp (ι R L),
  let f₂ := (lie_algebra.of_associative_algebra_hom g₂).comp (ι R L),
  have h' : f₁ = f₂, { ext, change (g₁ ∘ (ι R L)) x = (g₂ ∘ (ι R L)) x, rw h, },
  have h₁ : g₁ = lift R L A f₁, { rw ← lift_unique, refl, },
  have h₂ : g₂ = lift R L A f₂, { rw ← lift_unique, refl, },
  rw [h₁, h₂, h'],
end

end universal_enveloping_algebra
