/-
Copyright (c) 2020 Floris van Doorn. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Floris van Doorn
-/
import measure_theory.giry_monad
import measure_theory.set_integral

/-!
# The product measure space

TODO:

Define finite (and countably infinite) product measure
Fubini's theorem

-/
noncomputable theory
open_locale classical big_operators nnreal
open function set measure_theory.outer_measure measurable_space topological_space (hiding generate_from)

namespace function

example {Œπ : Type*} {Œ± : Œπ ‚Üí Type*} (i : Œπ) (g : (Œ† i, Œ± i) ‚Üí Œ± i) (s : set (Œ† i, Œ± i)) :
  eval i '' s = g '' s :=
begin
  success_if_fail { simp only [eval_apply] },
  simp, -- why does this simplify?
  sorry
end

end function
open function


namespace set

section

variables {Œ± Œ≤ Œ≥ : Type*} (s : Œ± ‚Üí set Œ≤) {t : Œ± ‚Üí set Œ≥}

/-- The union of `s y` for `y ‚â§ x`. -/
def accumulate [has_le Œ±] (x : Œ±) : set Œ≤ := ‚ãÉ y ‚â§ x, s y

variable {s}
lemma accumulate_def [has_le Œ±] {x : Œ±} : accumulate s x = ‚ãÉ y ‚â§ x, s y := rfl
@[simp] lemma mem_accumulate [has_le Œ±] {x : Œ±} {z : Œ≤} : z ‚àà accumulate s x ‚Üî ‚àÉ y ‚â§ x, z ‚àà s y :=
mem_bUnion_iff

lemma subset_accumulate [preorder Œ±] {x : Œ±} : s x ‚äÜ accumulate s x :=
Œª z, mem_bUnion le_rfl

lemma monotone_accumulate [preorder Œ±] : monotone (accumulate s) :=
Œª x y hxy, bUnion_subset_bUnion_left $ Œª z hz, le_trans hz hxy

lemma bUnion_accumulate [preorder Œ±] (y : Œ±) : (‚ãÉ x ‚â§ y, accumulate s x) = ‚ãÉ x ‚â§ y, s x :=
begin
  apply subset.antisymm,
  { simp only [subset_def, mem_Union, exists_imp_distrib, mem_accumulate],
    intros z x hxy x' hx'x hz, exact ‚ü®x', hx'x.trans hxy, hz‚ü© },
  { exact bUnion_subset_bUnion (Œª x hx, ‚ü®x, hx, subset_accumulate‚ü©) }
end

lemma Union_accumulate [preorder Œ±] : (‚ãÉ x, accumulate s x) = ‚ãÉ x, s x :=
begin
  apply subset.antisymm,
  { simp only [subset_def, mem_Union, exists_imp_distrib, mem_accumulate],
    intros z x x' hx'x hz, exact ‚ü®x', hz‚ü© },
  { exact Union_subset_Union (Œª i, subset_accumulate),  }
end

lemma accumulate_nat (s : ‚Ñï ‚Üí set Œ≤) {n : ‚Ñï} : accumulate s n = ‚ãÉ y ‚àà finset.range (n+1), s y :=
by { ext, simp [nat.lt_succ_iff] }

lemma Union_prod_of_monotone [semilattice_sup Œ±] (hs : monotone s) (ht : monotone t) :
  (‚ãÉ x, (s x).prod (t x)) = (‚ãÉ x, (s x)).prod (‚ãÉ x, (t x)) :=
begin
  ext ‚ü®z, w‚ü©, simp only [mem_prod, mem_Union, exists_imp_distrib, and_imp, iff_def], split,
  { intros x hz hw, exact ‚ü®‚ü®x, hz‚ü©, ‚ü®x, hw‚ü©‚ü© },
  { intros x hz x' hw, exact ‚ü®x ‚äî x', hs le_sup_left hz, ht le_sup_right hw‚ü© }
end

end

-- lemma if_eq_piecewise {Œ± : Type*} {Œ≤ : Œ± ‚Üí Sort*} (p : Œ± ‚Üí Prop) (f g : Œ†i, Œ≤ i) [decidable_pred p] :
--   (Œª x, if p x then f x else g x) = {x | p x}.piecewise f g :=
-- rfl

end set
open set

section
variables {Œ± Œ≤ Œ≥ : Type*}

-- done
@[simp, to_additive] lemma const_one [has_one Œ≤] : const Œ± (1 : Œ≤) = 1 :=
rfl

@[simp] lemma const_def {y : Œ≤} : (Œª x : Œ±, y) = const Œ± y := rfl

@[simp] lemma const_apply {y : Œ≤} {x : Œ±} : const Œ± y x = y := rfl

@[simp] lemma comp_zero [has_zero Œ≤] {f : Œ≤ ‚Üí Œ≥} : f ‚àò 0 = const Œ± (f 0) := rfl

@[simp] lemma zero_comp [has_zero Œ≥] {f : Œ± ‚Üí Œ≤} : (0 : Œ≤ ‚Üí Œ≥) ‚àò f = 0 := rfl

@[simp] lemma const_comp {f : Œ± ‚Üí Œ≤} {c : Œ≥} : const Œ≤ c ‚àò f = const Œ± c := rfl

@[simp] lemma comp_const {f : Œ≤ ‚Üí Œ≥} {b : Œ≤} : f ‚àò const Œ± b = const Œ± (f b) := rfl

end

namespace canonically_ordered_semiring
variables {Œ± : Type*} [canonically_ordered_comm_semiring Œ±]

end canonically_ordered_semiring

namespace finset

/-- If `g, h ‚â§ f` and `g i + h i ‚â§ f i`, then the product of `f` is at least the sum of the
  products of `g` and `h`. This is the version for `linear_ordered_comm_ring`. -/
lemma prod_univ_add_prod_univ_le {Œ± Œ≤} [fintype Œ±] [linear_ordered_comm_ring Œ≤] (i : Œ±)
  {f g h : Œ± ‚Üí Œ≤} (h2i : g i + h i ‚â§ f i) (hgf : ‚àÄ j ‚â† i, g j ‚â§ f j)
  (hhf : ‚àÄ j ‚â† i, h j ‚â§ f j) (hg : ‚àÄ i, 0 ‚â§ g i) (hh : ‚àÄ i, 0 ‚â§ h i) :
  ‚àè i, g i + ‚àè i, h i ‚â§ ‚àè i, f i :=
prod_add_prod_le (mem_univ i) h2i (Œª j _, hgf j) (Œª j _, hhf j) (Œª j _, hg j) (Œª j _, hh j)

/-- If `g, h ‚â§ f` and `g i + h i ‚â§ f i`, then the product of `f` is at least the sum of the
  products of `g` and `h`. This is the version for `canonically_ordered_comm_semiring`. -/
lemma prod_univ_add_prod_univ_le' {Œ± Œ≤} [fintype Œ±] [canonically_ordered_comm_semiring Œ≤] (i : Œ±)
  {f g h : Œ± ‚Üí Œ≤} (h2i : g i + h i ‚â§ f i) (hgf : ‚àÄ j ‚â† i, g j ‚â§ f j)
  (hhf : ‚àÄ j ‚â† i, h j ‚â§ f j) : ‚àè i, g i + ‚àè i, h i ‚â§ ‚àè i, f i :=
prod_add_prod_le' (mem_univ i) h2i (Œª j _, hgf j) (Œª j _, hhf j)

end finset

namespace ennreal

end ennreal

section filter

open filter
variables {Œ± Œ≤ : Type*} [topological_space Œ±] [conditionally_complete_linear_order Œ±] [order_topology Œ±]
open_locale topological_space

-- todo: replace
/-- If a function has a limit, then its limsup coincides with its limit. -/
theorem filter.tendsto.limsup_eq' {f : filter Œ≤} {u : Œ≤ ‚Üí Œ±} {a : Œ±} [ne_bot f]
  (h : tendsto u f (ùìù a)) : limsup f u = a :=
Limsup_eq_of_le_nhds h

/-- If a function has a limit, then its liminf coincides with its limit. -/
theorem filter.tendsto.liminf_eq' {f : filter Œ≤} {u : Œ≤ ‚Üí Œ±} {a : Œ±} [ne_bot f]
  (h : tendsto u f (ùìù a)) : liminf f u = a :=
Liminf_eq_of_le_nhds h

end filter

section tsum

open filter

variables {Œπ Œ± : Type*} {Œ≤ : Œ± ‚Üí Type*} [‚àÄ x, add_comm_monoid (Œ≤ x)]
  [‚àÄ x, topological_space (Œ≤ x)] {f : Œπ ‚Üí ‚àÄ x, Œ≤ x}

lemma pi.has_sum  {g : ‚àÄ x, Œ≤ x} : has_sum f g ‚Üî ‚àÄ x, has_sum (Œª i, f i x) (g x) :=
begin
  simp_rw [has_sum, nhds_pi, filter.tendsto_infi, filter.tendsto_comap_iff],
  apply forall_congr, intro a, congr', ext s, simp
end

lemma pi.summable : summable f ‚Üî ‚àÄ x, summable (Œª i, f i x) :=
by simp [summable, pi.has_sum, classical.skolem]

lemma tsum_apply [‚àÄ x, t2_space (Œ≤ x)] {x : Œ±} (hf : summable f) : (‚àë' i, f i) x = ‚àë' i, f i x :=
(pi.has_sum.mp hf.has_sum x).tsum_eq.symm

protected lemma ennreal.tsum_apply {Œπ Œ± : Type*} {f : Œπ ‚Üí Œ± ‚Üí ennreal} {x : Œ±} :
  (‚àë' i, f i) x = ‚àë' i, f i x :=
tsum_apply $ pi.summable.mpr $ Œª _, ennreal.summable

end tsum

lemma measurable_space_ennreal_def :
  generate_from (range Iio) = (by apply_instance : measurable_space ennreal) :=
(borel_eq_generate_Iio _).symm

lemma measurable_of_Iio {Œπ Œ±} [measurable_space Œπ]
  [topological_space Œ±] [second_countable_topology Œ±]
  [linear_order Œ±] [order_topology Œ±] [measurable_space Œ±] [borel_space Œ±] {f : Œπ ‚Üí Œ±}
  (hf : ‚àÄ x, is_measurable (f ‚Åª¬π' Iio x)) :
  measurable f :=
begin
  convert measurable_generate_from _,
  exact borel_space.measurable_eq.trans (borel_eq_generate_Iio _),
  rintro _ ‚ü®x, rfl‚ü©, exact hf x
end

lemma measurable_of_Ioi {Œπ Œ±} [measurable_space Œπ]
  [topological_space Œ±] [second_countable_topology Œ±]
  [linear_order Œ±] [order_topology Œ±] [measurable_space Œ±] [borel_space Œ±] {f : Œπ ‚Üí Œ±}
  (hf : ‚àÄ x, is_measurable (f ‚Åª¬π' Ioi x)) :
  measurable f :=
begin
  convert measurable_generate_from _,
  exact borel_space.measurable_eq.trans (borel_eq_generate_Ioi _),
  rintro _ ‚ü®x, rfl‚ü©, exact hf x
end

lemma measurable_of_Iic {Œπ Œ±} [measurable_space Œπ]
  [topological_space Œ±] [second_countable_topology Œ±]
  [linear_order Œ±] [order_topology Œ±] [measurable_space Œ±] [borel_space Œ±] {f : Œπ ‚Üí Œ±}
  (hf : ‚àÄ x, is_measurable (f ‚Åª¬π' Iic x)) : measurable f :=
begin
  apply measurable_of_Ioi,
  simp_rw [‚Üê compl_Iic, preimage_compl, is_measurable.compl_iff],
  assumption
end

lemma measurable_of_Ici {Œπ Œ±} [measurable_space Œπ]
  [topological_space Œ±] [second_countable_topology Œ±]
  [linear_order Œ±] [order_topology Œ±] [measurable_space Œ±] [borel_space Œ±] {f : Œπ ‚Üí Œ±}
  (hf : ‚àÄ x, is_measurable (f ‚Åª¬π' Ici x)) : measurable f :=
begin
  apply measurable_of_Iio,
  simp_rw [‚Üê compl_Ici, preimage_compl, is_measurable.compl_iff],
  assumption
end
#print is_measurable.bInter

-- #print is_rational

-- section
-- open filter
-- lemma has_countable_basis_at_top_ennreal :
--   has_countable_basis (at_top : filter ennreal) (Œª x : ennreal, x.to_real ‚àà range (coe : ‚Ñö ‚Üí ‚Ñù)) Iic :=
-- _

-- lemma countable_basis_elim {Œπ Œπ' Œ± Œ≤ : Type*} [preorder Œπ] [preorder Œ≤] {p : Œπ' ‚Üí Prop} {q : Œπ' ‚Üí Œπ}
--   (h : has_countable_basis (at_top : filter Œπ) p (Iic ‚àò q)) (f : Œπ ‚Üí Œ± ‚Üí Œ≤) {y : Œ≤} :
--   (‚ãÇ (i : Œπ), {x : Œ± | f i x ‚â§ y}) = (‚ãÇ (i' : Œπ') (h : p i'), {x : Œ± | f (q i') x ‚â§ y}) :=
-- begin

-- end


-- lemma measurable_supr' {Œπ Œπ' Œ± Œ≤ : Type*} [preorder Œπ] {p : Œπ' ‚Üí Prop} {q : Œπ' ‚Üí set Œπ}
--   (h : has_countable_basis (at_top : filter Œπ) p q) [measurable_space Œ±]
--   [measurable_space Œ≤] [topological_space Œ≤] [second_countable_topology Œ≤] [complete_linear_order Œ≤]
--   [borel_space Œ≤] [order_topology Œ≤]
--   (f : Œπ ‚Üí Œ± ‚Üí Œ≤) (h : ‚àÄ i, measurable (f i)) : measurable (Œª x, ‚®Ü i, f i x) :=
-- begin
--   apply measurable_of_Iic, simp only [preimage, ‚ÜêInter_set_of, supr_le_iff, mem_Iic], intro y,
--   sorry
--   -- apply is_measurable.Inter, intro i, exact h i is_measurable_Iic
-- end

-- lemma measurable_infi' {Œπ Œ± Œ≤ : Type*} [encodable Œπ] [measurable_space Œ±]
--   [measurable_space Œ≤] [topological_space Œ≤] [second_countable_topology Œ≤] [complete_linear_order Œ≤]
--   [borel_space Œ≤] [order_topology Œ≤]
--   (f : Œπ ‚Üí Œ± ‚Üí Œ≤) (h : ‚àÄ i, measurable (f i)) : measurable (Œª x, ‚®Ö i, f i x) :=
-- begin
--   apply measurable_of_Ici, simp only [preimage, ‚ÜêInter_set_of, le_infi_iff, mem_Ici], intro y,
--   apply is_measurable.Inter, intro i, exact h i is_measurable_Ici
-- end

-- end

lemma measurable.sum {Œπ Œ± Œ≤} [measurable_space Œ±] [measurable_space Œ≤] [add_comm_monoid Œ≤]
  [topological_space Œ≤] [has_continuous_add Œ≤] [borel_space Œ≤] [second_countable_topology Œ≤]
  (f : Œπ ‚Üí Œ± ‚Üí Œ≤) (h : ‚àÄ i, measurable (f i)) (s : finset Œπ) : measurable (Œª x, ‚àë i in s, f i x) :=
begin
  refine s.induction_on (by simp [measurable_zero]) _,
  intros i t hi hf, have := (h i).add hf, simpa [finset.sum_insert, hi]
end

/-- todo: `ennreal` can probably be generalized to a
[measurable_space Œ≤] [topological_space Œ≤] [add_comm_monoid Œ≤] [has_continuous_add Œ≤]
  [borel_space Œ≤] -/
lemma measurable.ennreal_tsum {Œπ Œ±} [encodable Œπ] [measurable_space Œ±]
  {f : Œπ ‚Üí Œ± ‚Üí ennreal} (h : ‚àÄ i, measurable (f i)) : measurable (Œª x, ‚àë' i, f i x) :=
by { simp_rw [ennreal.tsum_eq_supr_sum], apply measurable_supr, exact measurable.sum f h }
















section complete_lattice

variables {Œπ : Sort*} {Œ± : Type*} {x : Œ±} [complete_lattice Œ±]
lemma supr_const_le : (‚®Ü (h : Œπ), x) ‚â§ x :=
supr_le (Œª _, le_rfl)

lemma le_infi_const : x ‚â§ (‚®Ö (h : Œπ), x) :=
le_infi (Œª _, le_rfl)

end complete_lattice

section metric
open metric emetric
variables {Œ± : Type*} [metric_space Œ±] {x : Œ±} {s : set Œ±}

/-- The minimal distance of a point to a set as a `nnreal` -/
def inf_nndist (x : Œ±) (s : set Œ±) : ‚Ñù‚â•0 := ennreal.to_nnreal (inf_edist x s)
@[simp] lemma coe_inf_nndist : (inf_nndist x s : ‚Ñù) = inf_dist x s := rfl

@[simp] lemma inf_nndist_eq_zero : (inf_nndist x s : ‚Ñù) = inf_dist x s := rfl

/-- The minimal distance to a set (as `nnreal`) is Lipschitz in point with constant 1 -/
lemma lipschitz_inf_nndist_pt (s : set Œ±) : lipschitz_with 1 (Œªx, inf_nndist x s) :=
lipschitz_with.of_le_add $ Œª x y, inf_dist_le_inf_dist_add_dist

/-- The minimal distance to a set (as `nnreal`) is uniformly continuous in point -/
lemma uniform_continuous_inf_nndist_pt (s : set Œ±) :
  uniform_continuous (Œªx, inf_nndist x s) :=
(lipschitz_inf_nndist_pt s).uniform_continuous

/-- The minimal distance to a set (as `nnreal`) is continuous in point -/
lemma continuous_inf_nndist_pt (s : set Œ±) : continuous (Œªx, inf_nndist x s) :=
(uniform_continuous_inf_nndist_pt s).continuous


end metric

namespace measure_theory

namespace outer_measure
section bounded_by

variables {Œ± : Type*} (m : set Œ± ‚Üí ennreal)

/-- Given any function `m` assigning measures to sets, there is a unique maximal outer measure `Œº`
  satisfying `Œº s ‚â§ m s` for all `s : set Œ±`. This is the same as `outer_measure.of_function`,
  except that it doesn't require `m ‚àÖ = 0`. -/
def bounded_by : outer_measure Œ± :=
outer_measure.of_function (Œª s, ‚®Ü (h : s.nonempty), m s) (by simp [empty_not_nonempty])

variables {m}
theorem bounded_by_le (s : set Œ±) : bounded_by m s ‚â§ m s :=
(of_function_le _).trans supr_const_le

local attribute [irreducible] outer_measure.of_function
theorem bounded_by_eq_of_function (m_empty : m ‚àÖ = 0) (s : set Œ±) :
  bounded_by m s = outer_measure.of_function m m_empty s :=
begin
  have : (Œª s : set Œ±, ‚®Ü (h : s.nonempty), m s) = m,
  { ext1 t, cases t.eq_empty_or_nonempty with h h; simp [h, empty_not_nonempty, m_empty] },
  simp [bounded_by, this]
end

theorem bounded_by_eq (s : set Œ±) (m_empty : m ‚àÖ = 0) (m_mono : ‚àÄ ‚¶Ét : set Œ±‚¶Ñ, s ‚äÜ t ‚Üí m s ‚â§ m t)
  (m_subadd : ‚àÄ (s : ‚Ñï ‚Üí set Œ±), m (‚ãÉi, s i) ‚â§ (‚àë'i, m (s i))) : bounded_by m s = m s :=
by rw [bounded_by_eq_of_function m_empty, of_function_eq s m_mono m_subadd]

theorem le_bounded_by {Œº : outer_measure Œ±} : Œº ‚â§ bounded_by m ‚Üî ‚àÄ s, Œº s ‚â§ m s :=
begin
  rw [bounded_by, le_of_function, forall_congr], intro s,
  cases s.eq_empty_or_nonempty with h h; simp [h, empty_not_nonempty]
end

theorem le_bounded_by' {Œº : outer_measure Œ±} :
  Œº ‚â§ bounded_by m ‚Üî ‚àÄ s : set Œ±, s.nonempty ‚Üí Œº s ‚â§ m s :=
by { rw [le_bounded_by, forall_congr], intro s, cases s.eq_empty_or_nonempty with h h; simp [h] }

lemma bounded_by_caratheodory {m : set Œ± ‚Üí ennreal} {s : set Œ±}
  (hs : ‚àÄt, m (t ‚à© s) + m (t \ s) ‚â§ m t) : (bounded_by m).caratheodory.is_measurable' s :=
begin
  apply of_function_caratheodory, intro t,
  cases t.eq_empty_or_nonempty with h h,
  { simp [h, empty_not_nonempty] },
  { convert le_trans _ (hs t), { simp [h] }, exact add_le_add supr_const_le supr_const_le }
end

/- TODO: also replace `Inf_eq_of_function_Inf_gen`. -/
end bounded_by
end outer_measure
open outer_measure measure

section measurable_pi
variables {Œ± : Type*} {Œ≤ : Œ± ‚Üí Type*} [Œ†a, measurable_space (Œ≤ a)]

lemma is_measurable.pi [encodable Œ±] {t : Œ† i, set (Œ≤ i)} (hs : ‚àÄ i, is_measurable (t i)) :
  is_measurable (pi univ t) :=
by { convert is_measurable.Inter (Œª i, measurable_pi_apply _ (hs i) : _), simp [pi_def] }

lemma measurable_update (f : Œ† (a : Œ±), Œ≤ a) {i : Œ±} : measurable (update f i) :=
begin
  apply measurable_pi_lambda,
  intro j, by_cases hj : j = i,
  { cases hj, convert measurable_id, ext, simp },
  simp_rw [update_noteq hj], apply measurable_const,
end

lemma is_measurable_pi_of_nonempty [encodable Œ±] {t : Œ† i, set (Œ≤ i)} (h : (pi univ t).nonempty) :
  is_measurable (pi univ t) ‚Üî ‚àÄ i, is_measurable (t i) :=
begin
  rcases h with ‚ü®f, hf‚ü©, refine ‚ü®Œª hst i, _, is_measurable.pi‚ü©,
  convert measurable_update f hst, rw [update_preimage_univ_pi], exact Œª j _, hf j (mem_univ j)
end

lemma is_measurable_pi [encodable Œ±] {t : Œ† i, set (Œ≤ i)} :
  is_measurable (pi univ t) ‚Üî ‚àÄ i, is_measurable (t i) ‚à® ‚àÉ i, t i = ‚àÖ :=
begin
  cases (pi univ t).eq_empty_or_nonempty with h h,
  { have := univ_pi_eq_empty_iff.mp h, simp [h, univ_pi_eq_empty_iff.mp h] },
  { simp [‚Üênot_nonempty_iff_eq_empty, univ_pi_nonempty_iff.mp h, is_measurable_pi_of_nonempty h] }
end

lemma measurable_pi {Œ≥} [measurable_space Œ≥] {f : Œ≥ ‚Üí Œ† i, Œ≤ i} :
  measurable f ‚Üî ‚àÄ x, measurable (Œª c, f c x) :=
‚ü®Œª hf x, (measurable_pi_apply _).comp hf, measurable_pi_lambda f‚ü©

end measurable_pi

section measurable

variables {Œ± Œ≤ Œ≥: Type*} [measurable_space Œ±] [measurable_space Œ≤] [measurable_space Œ≥]

lemma measurable_measure {Œº : Œ± ‚Üí measure Œ≤} :
  measurable Œº ‚Üî ‚àÄ(s : set Œ≤) (hs : is_measurable s), measurable (Œªb, Œº b s) :=
‚ü®Œª hŒº s hs, (measurable_coe hs).comp hŒº, measurable_of_measurable_coe Œº‚ü©

lemma measurable_prod_mk_left {x : Œ±} : measurable (@prod.mk _ Œ≤ x) :=
measurable_const.prod_mk measurable_id

lemma measurable_prod_mk_right {y : Œ≤} : measurable (Œª x : Œ±, (x, y)) :=
measurable_id.prod_mk measurable_const

lemma measurable.prod_mk : measurable (@prod.mk Œ± Œ≤) :=
measurable_pi_lambda _ $ Œª x, measurable_prod_mk_right

lemma measurable_prod {f : Œ± ‚Üí Œ≤ √ó Œ≥} : measurable f ‚Üî
  measurable (Œªa, (f a).1) ‚àß measurable (Œªa, (f a).2) :=
‚ü®Œª hf, ‚ü®measurable_fst.comp hf, measurable_snd.comp hf‚ü©, Œª h, measurable.prod h.1 h.2‚ü©










end measurable

section measure_pi

variables {Œπ : Type*} [fintype Œπ] {Œ± : Œπ ‚Üí Type*} {m : Œ† i, outer_measure (Œ± i)}

/-- An upper bound for the measure in a product space.
  It is defined to be the product of the measures of all its projections.
  For boxes it should be equal to the correct measure. -/
def pi_premeasure (m : Œ† i, outer_measure (Œ± i)) (s : set (Œ† i, Œ± i)) : ennreal :=
‚àè i, m i (eval i '' s)

@[simp] lemma pi_premeasure_def {s : set (Œ† i, Œ± i)} :
  pi_premeasure m s = ‚àè i, m i (eval i '' s) := rfl

lemma pi_premeasure_pi {s : Œ† i, set (Œ± i)} (hs : (pi univ s).nonempty) :
  pi_premeasure m (pi univ s) = ‚àè i, m i (s i) :=
by simp [hs]

lemma pi_premeasure_pi' [nonempty Œπ] {s : Œ† i, set (Œ± i)} :
  pi_premeasure m (pi univ s) = ‚àè i, m i (s i) :=
begin
  cases (pi univ s).eq_empty_or_nonempty with h h,
  { rcases univ_pi_eq_empty_iff.mp h with ‚ü®i, hi‚ü©,
    have : ‚àÉ i, m i (s i) = 0 := ‚ü®i, by simp [hi]‚ü©,
    simpa [h, finset.card_univ, zero_pow (fintype.card_pos_iff.mpr _inst_2),
      @eq_comm _ (0 : ennreal), finset.prod_eq_zero_iff] },
  { simp [h] }
end

lemma pi_premeasure_pi_mono {s t : set (Œ† i, Œ± i)} (h : s ‚äÜ t) :
  pi_premeasure m s ‚â§ pi_premeasure m t :=
finset.prod_le_prod' (Œª i _, (m i).mono' (image_subset _ h))

lemma pi_premeasure_pi_eval [nonempty Œπ] {s : set (Œ† i, Œ± i)} :
  pi_premeasure m (pi univ (Œª i, eval i '' s)) = pi_premeasure m s :=
by simp [pi_premeasure_pi']

namespace outer_measure
/-- `outer_measure.pi m` is the finite product of the outer measures `{m i | i : Œπ}`.
  It is defined to be the maximal outer measure `n` with the property that
  `n (pi univ s) ‚â§ ‚àè i, m i (s i)`, where `pi univ s` is the product of the sets
  `{ s i | i : Œπ }`. -/
protected def pi (m : Œ† i, outer_measure (Œ± i)) : outer_measure (Œ† i, Œ± i) :=
bounded_by (pi_premeasure m)

lemma pi_pi_le (s : Œ† i, set (Œ± i)) :
  outer_measure.pi m (pi univ s) ‚â§ ‚àè i, m i (s i) :=
by { cases (pi univ s).eq_empty_or_nonempty with h h, simp [h],
     exact (bounded_by_le _).trans_eq (pi_premeasure_pi h) }


lemma le_pi {m : Œ† i, outer_measure (Œ± i)} {n : outer_measure (Œ† i, Œ± i)} :
  n ‚â§ outer_measure.pi m ‚Üî ‚àÄ (s : Œ† i, set (Œ± i)), (pi univ s).nonempty ‚Üí
    n (pi univ s) ‚â§ ‚àè i, m i (s i) :=
begin
  rw [outer_measure.pi, le_bounded_by'], split,
  { intros h s hs, refine (h _ hs).trans_eq (pi_premeasure_pi hs)  },
  { intros h s hs, refine le_trans (n.mono $ subset_pi_eval_image univ s) (h _ _),
    simp [univ_pi_nonempty_iff, hs] }
end

-- lemma pi_pi_false [encodable Œπ] (s : Œ† i, set (Œ± i))
--   (h2s : (pi univ s).nonempty) : outer_measure.pi m (pi univ s) = ‚àè i, m i (s i) :=
-- begin
--   simp_rw [‚Üê pi_premeasure_pi h2s],
--   refine le_antisymm (bounded_by_le _) _,
--   refine le_binfi _, dsimp only, intros t ht,
--   sorry
--   -- refine le_trans _ (ennreal.tsum_le_tsum $ Œª i, _),
-- end
end outer_measure

namespace measure

variables [Œ† i, measurable_space (Œ± i)] (Œº : Œ† i, measure (Œ± i))

protected lemma caratheodory {Œ±} [measurable_space Œ±] (Œº : measure Œ±) {s t : set Œ±}
  (hs : is_measurable s) : Œº (t ‚à© s) + Œº (t \ s) = Œº t :=
(le_to_outer_measure_caratheodory Œº s hs t).symm

lemma pi_caratheodory :
  measurable_space.pi ‚â§ (outer_measure.pi (Œª i, (Œº i).to_outer_measure)).caratheodory :=
begin
  refine supr_le _, intros i s hs,
  rw [measurable_space.comap] at hs, rcases hs with ‚ü®s, hs, rfl‚ü©,
  apply bounded_by_caratheodory, intro t,
  simp_rw [pi_premeasure_def],
  refine finset.prod_univ_add_prod_univ_le' i _ _ _,
  { simp [image_inter_preimage, image_diff_preimage, (Œº i).caratheodory hs, le_refl] },
  { intros j hj, apply mono', apply image_subset, apply inter_subset_left },
  { intros j hj, apply mono', apply image_subset, apply diff_subset }
end

/-- `measure.pi Œº` is the finite product of the measures `{Œº i | i : Œπ}`.
  It is defined to be the maximal product measure, i.e.
  the maximal measure `n` with the property that `ŒΩ (pi univ s) = ‚àè i, Œº i (s i)`,
  where `pi univ s` is the product of the sets `{ s i | i : Œπ }`. -/
protected def pi : measure (Œ† i, Œ± i) :=
to_measure (outer_measure.pi (Œª i, (Œº i).to_outer_measure)) (pi_caratheodory Œº)

-- lemma pi_pi [encodable Œπ] (s : Œ† i, set (Œ± i)) (h1s : ‚àÄ i, is_measurable (s i))
--   (h2s : (pi univ s).nonempty) : measure.pi Œº (pi univ s) = ‚àè i, Œº i (s i) :=
-- begin
--   rw [measure.pi, to_measure_apply _ _ (is_measurable.pi h1s)],
--   simp_rw [‚Üê to_outer_measure_apply, ‚Üê pi_premeasure_pi h2s],
--   refine le_antisymm (bounded_by_le _) _,
--   refine le_binfi _, dsimp only, intros t ht,
--   sorry
-- end

end measure

end measure_pi

lemma indicator_comp_right {Œ± Œ≤ Œ≥} [has_zero Œ≥] {s : set Œ≤} (f : Œ± ‚Üí Œ≤) {g : Œ≤ ‚Üí Œ≥} {x : Œ±} :
  indicator (f ‚Åª¬π' s) (g ‚àò f) x = indicator s g (f x) :=
by { simp only [indicator], split_ifs; refl }


lemma measure_if {Œ± Œ≤} [measurable_space Œ±] {x : Œ≤} {t : set Œ≤} {s : set Œ±} {Œº : measure Œ±} :
  Œº (if x ‚àà t then s else ‚àÖ) = indicator t (Œª _, Œº s) x :=
begin
  split_ifs; simp [h],
end

/-! ### Prod -/

variables {Œ± Œ≤ : Type*} [measurable_space Œ±] [measurable_space Œ≤]

/-- x -/
def is_pi_system {Œ±} (C : set (set Œ±)) : Prop :=
‚àÄ s t ‚àà C, (s ‚à© t : set Œ±).nonempty ‚Üí s ‚à© t ‚àà C

lemma generate_from_prod : generate_from
    (image2 set.prod { s | is_measurable s } { t | is_measurable t } : set (set (Œ± √ó Œ≤))) =
  prod.measurable_space :=
begin
  apply le_antisymm,
  { apply generate_from_le, rintro _ ‚ü®s, t, hs, ht, rfl‚ü©, rw [prod_eq],
    exact (measurable_fst hs).inter (measurable_snd ht) },
  { refine sup_le _ _; rintro _ ‚ü®s, hs, rfl‚ü©; apply is_measurable_generate_from,
    exact ‚ü®s, univ, hs, is_measurable.univ, prod_univ‚ü©,
    exact ‚ü®univ, s, is_measurable.univ, hs, univ_prod‚ü© }
end

lemma is_pi_system_prod :
  is_pi_system (image2 set.prod { s : set Œ± | is_measurable s } { t : set Œ≤ | is_measurable t }) :=
by { rintro _ _ ‚ü®s‚ÇÅ, t‚ÇÅ, hs‚ÇÅ, ht‚ÇÅ, rfl‚ü© ‚ü®s‚ÇÇ, t‚ÇÇ, hs‚ÇÇ, ht‚ÇÇ, rfl‚ü© _, rw [prod_inter_prod],
     exact mem_image2_of_mem (hs‚ÇÅ.inter hs‚ÇÇ) (ht‚ÇÅ.inter ht‚ÇÇ) }


/--
Use `sigma_finite_mk` to create an instance without the requirement that `spanning_sets` is
  monotone.
-/
def sigma_finite_mk {Œº : measure Œ±} {s : set Œ±} (sets : ‚Ñï ‚Üí set Œ±)
  (h1 : ‚àÄ i, is_measurable (sets i)) (h2 : ‚àÄ i, Œº (sets i) < ‚ä§) (h3 : (‚ãÉ i, sets i) = s) :
  sigma_finite Œº s :=
{ spanning_sets := accumulate sets,
  monotone_spanning_sets := monotone_accumulate,
  is_measurable_spanning_sets :=
    Œª i, is_measurable.Union $ Œª j, is_measurable.Union_Prop $ Œª hij, h1 j,
  measure_spanning_sets_lt_top :=
    by { intro i, rw [accumulate_nat],
      apply (measure_bUnion_le _ _).trans_lt,
      refine (finset.tsum_subtype _ (Œª i, Œº (sets i))).le.trans_lt _,
      rw ennreal.sum_lt_top_iff, exact Œª j _, h2 j,
      exact (finset.range (i+1)).countable_to_set },
  Union_spanning_sets := by { rw [Union_accumulate, h3] } }

namespace measure
lemma supr_restrict_spanning_sets {Œº : measure Œ±} [sigma_finite Œº univ] {s : set Œ±}
  (hs : is_measurable s) :
  (‚®Ü i, Œº.restrict (spanning_sets Œº univ i) s) = Œº s :=
begin
  convert (restrict_Union_apply_eq_supr (is_measurable_spanning_sets Œº univ) _ hs).symm,
  { simp [Union_spanning_sets] },
  { exact directed_of_sup (monotone_spanning_sets Œº univ) }
end

end measure
end measure_theory
open measure_theory




section measurable


variables {Œ± Œ≤ Œ≥: Type*} [measurable_space Œ±] [measurable_space Œ≤] [measurable_space Œ≥]

lemma measurable.of_uncurry_left {f : Œ± ‚Üí Œ≤ ‚Üí Œ≥} (hf : measurable (uncurry f)) {x : Œ±} :
  measurable (f x) :=
hf.comp measurable_prod_mk_left

lemma measurable.of_uncurry_right {f : Œ± ‚Üí Œ≤ ‚Üí Œ≥} (hf : measurable (uncurry f)) {y : Œ≤} :
  measurable (Œª x, f x y) :=
hf.comp measurable_prod_mk_right

end measurable







variables {Œ± Œ≤ : Type*} [measurable_space Œ±] [measurable_space Œ≤]
  {Œº : measure_theory.measure Œ±} {ŒΩ : measure_theory.measure Œ≤}
open measure_theory.measure

lemma is_measurable.measure_prod_mk_left_finite [finite_measure ŒΩ] {s : set (Œ± √ó Œ≤)}
  (hs : is_measurable s) : measurable (Œª x, ŒΩ (prod.mk x ‚Åª¬π' s)) :=
begin
  refine induction_on_inter generate_from_prod.symm is_pi_system_prod _ _ _ _ hs,
  { simp [measurable_zero] },
  { rintro _ ‚ü®s, t, hs, ht, rfl‚ü©, simp only [mk_preimage_prod_right_eq_if, measure_if],
    exact measurable_const.indicator hs },
  { intros t ht h2t,
    simp_rw [preimage_compl, measure_compl (measurable_prod_mk_left ht) (measure_lt_top ŒΩ _)],
    exact measurable_const.ennreal_sub h2t },
  { intros f h1f h2f h3f, simp_rw [preimage_Union],
    have : ‚àÄ b, ŒΩ (‚ãÉ i, prod.mk b ‚Åª¬π' f i) = ‚àë' i, ŒΩ (prod.mk b ‚Åª¬π' f i) :=
      Œª b, measure_Union (Œª i j hij, disjoint.preimage _ (h1f i j hij))
        (Œª i, measurable_prod_mk_left (h2f i)),
    simp_rw [this], apply measurable.ennreal_tsum h3f },
end

lemma is_measurable.measure_prod_mk_left [sigma_finite ŒΩ univ] {s : set (Œ± √ó Œ≤)}
  (hs : is_measurable s) : measurable (Œª x, ŒΩ (prod.mk x ‚Åª¬π' s)) :=
begin
  have : ‚àÄ x, is_measurable (prod.mk x ‚Åª¬π' s) := Œª x, measurable_prod_mk_left hs,
  simp only [‚Üê supr_restrict_spanning_sets, this],
  apply measurable_supr, intro i,
  haveI : fact _ := measure_spanning_sets_lt_top ŒΩ univ i,
  exact hs.measure_prod_mk_left_finite
end

lemma measurable.map_prod_mk_left [sigma_finite ŒΩ univ] : measurable (Œª x : Œ±, map (prod.mk x) ŒΩ) :=
begin
  apply measurable_of_measurable_coe, intros s hs,
  simp_rw [map_apply measurable_prod_mk_left hs],
  exact hs.measure_prod_mk_left
end

/- Is there a way to do this without duplicating? -/
lemma is_measurable.measure_prod_mk_right_finite {Œº : measure Œ±} [finite_measure Œº] {s : set (Œ± √ó Œ≤)}
  (hs : is_measurable s) : measurable (Œª y, Œº ((Œª x, (x, y)) ‚Åª¬π' s)) :=
begin
  refine induction_on_inter generate_from_prod.symm is_pi_system_prod _ _ _ _ hs,
  { simp [measurable_zero] },
  { rintro _ ‚ü®s, t, hs, ht, rfl‚ü©, simp only [mk_preimage_prod_left_eq_if, measure_if],
    exact measurable_const.indicator ht },
  { intros t ht h2t,
    simp_rw [preimage_compl, measure_compl (measurable_prod_mk_right ht) (measure_lt_top Œº _)],
    exact measurable_const.ennreal_sub h2t },
  { intros f h1f h2f h3f, simp_rw [preimage_Union],
    have : ‚àÄ y, Œº (‚ãÉ i, (Œª x, (x, y)) ‚Åª¬π' f i) = ‚àë' i, Œº ((Œª x, (x, y)) ‚Åª¬π' f i) :=
      Œª y, measure_Union (Œª i j hij, disjoint.preimage _ (h1f i j hij))
        (Œª i, measurable_prod_mk_right (h2f i)),
    simp_rw [this], apply measurable.ennreal_tsum h3f },
end

lemma is_measurable.measure_prod_mk_right {Œº : measure Œ±} [sigma_finite Œº univ] {s : set (Œ± √ó Œ≤)}
  (hs : is_measurable s) : measurable (Œª y, Œº ((Œª x, (x, y)) ‚Åª¬π' s)) :=
begin
  have : ‚àÄ y, is_measurable ((Œª x, (x, y)) ‚Åª¬π' s) := Œª y, measurable_prod_mk_right hs,
  simp only [‚Üê supr_restrict_spanning_sets, this],
  apply measurable_supr, intro i,
  haveI : fact _ := measure_spanning_sets_lt_top Œº univ i,
  exact hs.measure_prod_mk_right_finite
end

lemma measurable.map_prod_mk_right {Œº : measure Œ±} [sigma_finite Œº univ] :
  measurable (Œª y : Œ≤, map (Œª x : Œ±, (x, y)) Œº) :=
begin
  apply measurable_of_measurable_coe, intros s hs,
  simp_rw [map_apply measurable_prod_mk_right hs],
  exact hs.measure_prod_mk_right
end

namespace measure_theory
namespace measure

/-- The product of two measures. -/
protected def prod (Œº : measure Œ±) (ŒΩ : measure Œ≤) : measure (Œ± √ó Œ≤) :=
bind Œº $ Œª x : Œ±, map (prod.mk x) ŒΩ

/-- The symmetric version of the product of two measures. -/
protected def prod_symm (Œº : measure Œ±) (ŒΩ : measure Œ≤) : measure (Œ± √ó Œ≤) :=
bind ŒΩ $ Œª y : Œ≤, map (Œª x, (x, y)) Œº

variables {Œº ŒΩ}

-- instance Prop.measurable_space : measurable_space Prop := ‚ä§
-- instance set.measurable_space : measurable_space (set Œ±) := measurable_space.pi

-- lemma measurable.measure_apply {Œπ} [measurable_space Œπ] {s : Œπ ‚Üí set Œ±}
--   (hf : ‚àÄ i, is_measurable (s i)) : measurable (Œªi, Œº (s i)) :=
-- begin
--   refine measurable.comp _ _,
-- end

--measurable_supr

-- def directed_supr {Œπ} [nonempty Œπ] [partial_order Œπ] {Œº : Œπ ‚Üí measure Œ±} (hŒº : monotone Œº) :
--   measure Œ± :=
-- begin
--   apply measure.of_measurable (Œª s _, ‚®Ü i, Œº i s) (by simp),
--   sorry
-- end


/-- A directed supremum of measures applied is evaluated as a supremum on `ennreal`. -/
-- lemma supr_apply_of_monotone {Œπ} [partial_order Œπ] {Œº : Œπ ‚Üí measure Œ±} (hŒº : monotone Œº)
--   {s : set Œ±} (hs : is_measurable s) : (‚®Ü i, Œº i) s = ‚®Ü i, Œº i s :=
-- begin
--   refine le_antisymm _ _,
--   { sorry },
--   { refine supr_le _, intro i, exact (le_supr Œº i : _) s hs },
-- end

-- lemma supr_restrict {Œπ} [encodable Œπ] {Œº : measure Œ±} {t : Œπ ‚Üí set Œ±} :
--   (‚®Ü i, Œº.restrict (t i)) = Œº.restrict (‚ãÉ i, t i) :=
-- begin
--   ext s hs, rw [restrict_Union_apply_eq_supr],
-- end

/- todo: rename set.disjoint.preimage -> disjoint.preimage -/


lemma prod_apply [sigma_finite ŒΩ univ] {s : set (Œ± √ó Œ≤)} (hs : is_measurable s) :
  Œº.prod ŒΩ s = ‚à´‚Åª x, ŒΩ (prod.mk x ‚Åª¬π' s) ‚àÇŒº :=
begin
  rw [measure.prod, bind_apply hs],
  congr, ext x : 1, rw [map_apply _ hs],
  apply measurable_prod_mk_left,
  exact measurable.map_prod_mk_left
end

@[simp] lemma prod_prod [sigma_finite ŒΩ univ] {s : set Œ±} {t : set Œ≤}
  (hs : is_measurable s) (ht : is_measurable t) : Œº.prod ŒΩ (s.prod t) = Œº s * ŒΩ t :=
by simp_rw [prod_apply (hs.prod ht), mk_preimage_prod_right_eq_if, measure_if,
  lintegral_indicator _ hs, lintegral_const, restrict_apply is_measurable.univ,
  univ_inter, mul_comm]

@[simp] lemma prod_symm_apply [sigma_finite Œº univ] {s : set (Œ± √ó Œ≤)} (hs : is_measurable s) :
  Œº.prod_symm ŒΩ s = ‚à´‚Åª y, Œº ((Œª x, (x, y)) ‚Åª¬π' s) ‚àÇŒΩ :=
begin
  rw [measure.prod_symm, bind_apply hs],
  congr, ext x : 1, rw [map_apply _ hs],
  apply measurable_prod_mk_right,
  exact measurable.map_prod_mk_right
end

@[simp] lemma prod_symm_prod [sigma_finite Œº univ] {s : set Œ±} {t : set Œ≤}
  (hs : is_measurable s) (ht : is_measurable t) : Œº.prod_symm ŒΩ (s.prod t) = Œº s * ŒΩ t :=
by simp_rw [prod_symm_apply (hs.prod ht), mk_preimage_prod_left_eq_if, measure_if,
  lintegral_indicator _ ht, lintegral_const, restrict_apply is_measurable.univ, univ_inter]

section both_sigma_finite

variables [sigma_finite Œº univ] [sigma_finite ŒΩ univ]

lemma prod_unique {ŒºŒΩ‚ÇÅ ŒºŒΩ‚ÇÇ : measure (Œ± √ó Œ≤)}
  (h‚ÇÅ : ‚àÄ s t, is_measurable s ‚Üí is_measurable t ‚Üí ŒºŒΩ‚ÇÅ (s.prod t) = Œº s * ŒΩ t)
  (h‚ÇÇ : ‚àÄ s t, is_measurable s ‚Üí is_measurable t ‚Üí ŒºŒΩ‚ÇÇ (s.prod t) = Œº s * ŒΩ t) : ŒºŒΩ‚ÇÅ = ŒºŒΩ‚ÇÇ :=
begin
  refine ext_of_generate_from_of_Union _
    (Œª i, (spanning_sets Œº univ i).prod (spanning_sets ŒΩ univ i))
    generate_from_prod.symm is_pi_system_prod _ _ _ _,
  { rw [Union_prod_of_monotone (monotone_spanning_sets Œº _) (monotone_spanning_sets ŒΩ _)],
    simp_rw [Union_spanning_sets, univ_prod_univ] },
  { intro i, apply mem_image2_of_mem; apply is_measurable_spanning_sets },
  { intro i, rw [h‚ÇÅ], apply ennreal.mul_lt_top; apply measure_spanning_sets_lt_top,
    all_goals { apply is_measurable_spanning_sets } },
  { rintro _ ‚ü®s, t, hs, ht, rfl‚ü©, simp * at * }
end

lemma prod_eq_prod_symm : Œº.prod ŒΩ = Œº.prod_symm ŒΩ :=
prod_unique (Œª _ _, prod_prod) (Œª _ _, prod_symm_prod)

lemma prod_apply_symm {s : set (Œ± √ó Œ≤)} (hs : is_measurable s) :
  Œº.prod ŒΩ s = ‚à´‚Åª y, Œº ((Œª x, (x, y)) ‚Åª¬π' s) ‚àÇŒΩ :=
by simp [prod_eq_prod_symm, prod_symm_apply, hs]

end both_sigma_finite

end measure
open measure
-- @[elab_as_eliminator]
-- theorem finset.induction_subsingleton {Œ± : Type*} {p : finset Œ± ‚Üí Prop} [decidable_eq Œ±]
--   (h‚ÇÅ : ‚àÄ s x, s ‚äÜ {x} ‚Üí p s)
--   (h‚ÇÇ : ‚àÄ ‚¶Éx a : Œ±‚¶Ñ {s : finset Œ±}, x ‚àà s ‚Üí a ‚àâ s ‚Üí p s ‚Üí p (insert a s)) : ‚àÄ s, p s :=
-- begin
--   refine finset.induction _ _,
--   { exact },
--   { }
-- end


section simple_func
open simple_func finset

-- /- deprecated -/
-- @[elab_as_eliminator]
-- lemma simple_func.induction2 {Œ≥} [add_monoid Œ≥] (P : (Œ± ‚Üí Œ≥) ‚Üí Prop)
--   (h_ind : ‚àÄ c {s}, is_measurable s ‚Üí P (indicator s (Œª _, c)))
--   (h_sum : ‚àÄ ‚¶Éf g‚¶Ñ, P f ‚Üí P g ‚Üí P (f + g)) (f : simple_func Œ± Œ≥) : P f :=
-- simple_func.induction h_ind (Œª f g hf hg, h_sum hf hg) f

-- /- deprecated -/
-- @[elab_as_eliminator]
-- lemma simple_func.induction3 {Œ≥} [measurable_space Œ≥] [add_monoid Œ≥]
--   (P : (Œ± ‚Üí Œ≥) ‚Üí Prop) (h_ind : ‚àÄ (c : Œ≥) ‚¶És‚¶Ñ, is_measurable s ‚Üí P (indicator s (Œª _, c)))
--   (h_sum : ‚àÄ ‚¶Éf g‚¶Ñ, measurable f ‚Üí measurable g ‚Üí P f ‚Üí P g ‚Üí P (f + g))
--   (f : simple_func Œ± Œ≥) : P f :=
-- simple_func.induction h_ind (Œª f g hf hg, h_sum f.measurable g.measurable hf hg) f

end simple_func
end measure_theory
open measure_theory measure_theory.measure
section simple_func
open measure_theory.simple_func

end simple_func

lemma measurable.ennreal_induction' {P : (Œ± ‚Üí ennreal) ‚Üí Prop}
  (h_ind : ‚àÄ ‚¶És‚¶Ñ, is_measurable s ‚Üí P (indicator s 1))
  (h_sum : ‚àÄ ‚¶Éf g : Œ± ‚Üí ennreal‚¶Ñ, set.univ ‚äÜ f ‚Åª¬π' {0} ‚à™ g ‚Åª¬π' {0} ‚Üí measurable f ‚Üí measurable g ‚Üí
    P f ‚Üí P g ‚Üí P (f + g))
  (h_smul : ‚àÄ (c : ennreal) ‚¶Éf‚¶Ñ, measurable f ‚Üí P f ‚Üí P (c ‚Ä¢ f))
  (h_supr : ‚àÄ ‚¶Éf : ‚Ñï ‚Üí Œ± ‚Üí ennreal‚¶Ñ (hf : ‚àÄn, measurable (f n)) (h_mono : monotone f)
    (hP : ‚àÄ n, P (f n)), P (Œª x, ‚®Ü n, f n x))
  ‚¶Éf : Œ± ‚Üí ennreal‚¶Ñ (hf : measurable f) : P f :=
begin
  refine hf.ennreal_induction _ h_sum h_supr,
  intros c s hs, convert h_smul c (measurable_one.indicator hs) (h_ind hs),
  ext1 x, simp [indicator]
end

/-- The Lebesgue intergral is measurable. This shows that the integrand of (the right-hand-side of)
  Tonelli's theorem is measurable. -/
lemma measurable.lintegral_prod_right [sigma_finite ŒΩ univ] :
  ‚àÄ {f : Œ± √ó Œ≤ ‚Üí ennreal} (hf : measurable f), measurable (Œª x, ‚à´‚Åª y, f (x, y) ‚àÇŒΩ) :=
begin
  have m := @measurable_prod_mk_left,
  refine measurable.ennreal_induction _ _ _,
  { intros c s hs, simp only [‚Üê indicator_comp_right],
    suffices : measurable (Œª x, c * ŒΩ (prod.mk x ‚Åª¬π' s)),
    { simpa [lintegral_indicator _ (m hs)] },
    exact measurable_const.ennreal_mul hs.measure_prod_mk_left },
  { rintro f g - hf hg h2f h2g, simp [lintegral_add (hf.comp m) (hg.comp m)], exact h2f.add h2g },
  { intros f hf h2f h3f,
    have := measurable_supr h3f,
    have : ‚àÄ x, monotone (Œª n y, f n (x, y)) := Œª x i j hij y, h2f hij (x, y),
    simpa [lintegral_supr (Œª n, (hf n).comp m), this] }
end

lemma measurable.lintegral_prod_right' [sigma_finite ŒΩ univ] {f : Œ± ‚Üí Œ≤ ‚Üí ennreal}
  (hf : measurable (uncurry f)) : measurable (Œª x, ‚à´‚Åª y, f x y ‚àÇŒΩ) :=
hf.lintegral_prod_right

/-- The Lebesgue intergral is measurable This shows that the integrand of (the right-hand-side of)
  the symmetric version of Tonelli's theorem is measurable. -/
lemma measurable.lintegral_prod_left [sigma_finite Œº univ] :
  ‚àÄ {f : Œ± √ó Œ≤ ‚Üí ennreal} (hf : measurable f), measurable (Œª y, ‚à´‚Åª x, f (x, y) ‚àÇŒº) :=
begin
  have m := @measurable_prod_mk_right,
  refine measurable.ennreal_induction _ _ _,
  { intros c s hs, simp only [(show (_, _) = (Œª x, (x, _)) _, from rfl), ‚Üê indicator_comp_right]
      {single_pass := tt, beta := ff},
    suffices : measurable (Œª y, c * Œº ((Œª x, (x, y)) ‚Åª¬π' s)),
    { simpa [function.comp, lintegral_indicator _ (m hs)] },
    exact measurable_const.ennreal_mul hs.measure_prod_mk_right },
  { rintro f g - hf hg h2f h2g, simp [lintegral_add (hf.comp m) (hg.comp m)], exact h2f.add h2g },
  { intros f hf h2f h3f,
    have := measurable_supr h3f,
    have : ‚àÄ y, monotone (Œª n x, f n (x, y)) := Œª y i j hij x, h2f hij (x, y),
    simpa [lintegral_supr (Œª n, (hf n).comp m), this] },
end

section

variables {Œ¥ : Type*} [measurable_space Œ¥] [measurable_space Œ±] [topological_space Œ±] [borel_space Œ±]

-- use in integrable_add
@[to_additive]
lemma measurable.mul' [has_mul Œ±] [has_continuous_mul Œ±] [second_countable_topology Œ±]
  {f : Œ¥ ‚Üí Œ±} {g : Œ¥ ‚Üí Œ±} : measurable f ‚Üí measurable g ‚Üí measurable (f * g) :=
measurable.mul

end

variables {E : Type*} [normed_group E] [second_countable_topology E] [normed_space ‚Ñù E]
  [complete_space E] [measurable_space E] [borel_space E]

namespace measure_theory
/-- Tonelli's Theorem: For `ennreal`-valued measurable functions on `Œ± √ó Œ≤`,
  the integral of `f` is equal to the iterated integral. -/
lemma lintegral_prod [sigma_finite ŒΩ univ] :
  ‚àÄ (f : Œ± √ó Œ≤ ‚Üí ennreal) (hf : measurable f), ‚à´‚Åª z, f z ‚àÇ(Œº.prod ŒΩ) = ‚à´‚Åª x, ‚à´‚Åª y, f (x, y) ‚àÇŒΩ ‚àÇŒº :=
begin
  have m := @measurable_prod_mk_left,
  refine measurable.ennreal_induction _ _ _,
  { intros c s hs, simp only [‚Üê indicator_comp_right],
    simp [lintegral_indicator, m hs, hs, lintegral_const_mul, hs.measure_prod_mk_left,
      prod_apply] },
  { rintro f g - hf hg h2f h2g,
    simp [lintegral_add, hf.comp m, hg.comp m, h2f, h2g, measurable.lintegral_prod_right, hf, hg] },
  { intros f hf h2f h3f,
    have kf : ‚àÄ x n, measurable (Œª y, f n (x, y)) := Œª x n, (hf n).comp m,
    have k2f : ‚àÄ x, monotone (Œª n y, f n (x, y)) := Œª x i j hij y, h2f hij (x, y),
    have lf : ‚àÄ n, measurable (Œª x, ‚à´‚Åª y, f n (x, y) ‚àÇŒΩ) :=
      Œª n, measurable.lintegral_prod_right (hf n),
    have l2f : monotone (Œª n x, ‚à´‚Åª y, f n (x, y) ‚àÇŒΩ) := Œª i j hij x, lintegral_mono (k2f x hij),
    simp only [lintegral_supr hf h2f, lintegral_supr (kf _), k2f, lintegral_supr lf l2f, h3f] },
end

/-- The symmetric verion of Tonelli's Theorem: For `ennreal`-valued measurable functions on `Œ± √ó Œ≤`,
  the integral of `f` is equal to the iterated integral, in reverse order. -/
lemma lintegral_prod_symm [sigma_finite ŒΩ univ] [sigma_finite Œº univ] :
  ‚àÄ (f : Œ± √ó Œ≤ ‚Üí ennreal) (hf : measurable f), ‚à´‚Åª z, f z ‚àÇ(Œº.prod ŒΩ) = ‚à´‚Åª y, ‚à´‚Åª x, f (x, y) ‚àÇŒº ‚àÇŒΩ :=
begin
  have m := @measurable_prod_mk_right,
  refine measurable.ennreal_induction _ _ _,
  { intros c s hs, simp only [(show (_, _) = (Œª x, (x, _)) _, from rfl), ‚Üê indicator_comp_right]
      {single_pass := tt, beta := ff},
    simp [lintegral_indicator, m hs, hs, lintegral_const_mul, hs.measure_prod_mk_right,
      prod_apply_symm] },
  { rintro f g - hf hg h2f h2g,
    simp [lintegral_add, hf.comp m, hg.comp m, h2f, h2g, measurable.lintegral_prod_left, hf, hg] },
  { intros f hf h2f h3f,
    have kf : ‚àÄ y n, measurable (Œª x, f n (x, y)) := Œª y n, (hf n).comp m,
    have k2f : ‚àÄ y, monotone (Œª n x, f n (x, y)) := Œª y i j hij x, h2f hij (x, y),
    have lf : ‚àÄ n, measurable (Œª y, ‚à´‚Åª x, f n (x, y) ‚àÇŒº) := Œª n, (hf n).lintegral_prod_left,
    have l2f : monotone (Œª n y, ‚à´‚Åª x, f n (x, y) ‚àÇŒº) := Œª i j hij y, lintegral_mono (k2f y hij),
    simp only [lintegral_supr hf h2f, lintegral_supr (kf _), k2f, lintegral_supr lf l2f, h3f] },
end

/-- The reversed version of Tonelli's Theorem. -/
lemma lintegral_lintegral [sigma_finite ŒΩ univ] ‚¶Éf : Œ± ‚Üí Œ≤ ‚Üí ennreal‚¶Ñ
  (hf : measurable (uncurry f)) :
  ‚à´‚Åª x, ‚à´‚Åª y, f x y ‚àÇŒΩ ‚àÇŒº = ‚à´‚Åª z, f z.1 z.2 ‚àÇ(Œº.prod ŒΩ) :=
(lintegral_prod _ hf).symm

-- variables {G : Type*} [measurable_space Œ≤] [normed_group G]

lemma ae_lt_top {f : Œ± ‚Üí ennreal} (hf : measurable f)
  (h2f : ‚à´‚Åª x, f x ‚àÇŒº < ‚ä§) : ‚àÄ·µê x ‚àÇŒº, f x < ‚ä§ :=
begin
  simp_rw [ae_iff, ennreal.not_lt_top], by_contra h, rw [‚Üê not_le] at h2f, apply h2f,
  have : (f ‚Åª¬π' {‚ä§}).indicator ‚ä§ ‚â§ f,
  { intro x, by_cases hx : x ‚àà f ‚Åª¬π' {‚ä§}; [simpa [hx], simp [hx]] },
  convert lintegral_mono this,
  rw [lintegral_indicator _ (hf (is_measurable_singleton ‚ä§))], simp [ennreal.top_mul, preimage, h]
end

lemma integrable.prod_left [sigma_finite Œº univ] [sigma_finite ŒΩ univ] ‚¶Éf : Œ± √ó Œ≤ ‚Üí E‚¶Ñ
  (hf : integrable f (Œº.prod ŒΩ)) : ‚àÄ·µê y ‚àÇ ŒΩ, integrable (Œª x, f (x, y)) Œº :=
begin
  simp [integrable, and_iff_right (hf.measurable.comp measurable_prod_mk_right)],
  refine ae_lt_top hf.measurable.ennnorm.lintegral_prod_left _,
  simp_rw [‚Üê lintegral_prod_symm _ hf.measurable.ennnorm], exact hf.has_finite_integral
end

lemma integrable.prod_right [sigma_finite ŒΩ univ] ‚¶Éf : Œ± √ó Œ≤ ‚Üí E‚¶Ñ
  (hf : integrable f (Œº.prod ŒΩ)) : ‚àÄ·µê x ‚àÇ Œº, integrable (Œª y, f (x, y)) ŒΩ :=
begin
  simp [integrable, and_iff_right (hf.measurable.comp measurable_prod_mk_left)],
  refine ae_lt_top hf.measurable.ennnorm.lintegral_prod_right _,
  simp_rw [‚Üê lintegral_prod _ hf.measurable.ennnorm], exact hf.has_finite_integral
end

end measure_theory

/- rename `to_fun_of_fun` to `coe_of_fun` (in `l1`) -/

-- lemma measurable_add_iff {f g : Œ± ‚Üí E} (h : univ ‚äÜ f ‚Åª¬π' {0} ‚à™ g ‚Åª¬π' {0}) :
--   measurable (f + g) ‚Üî measurable f ‚àß measurable g :=
-- begin
--   refine ‚ü®Œª hfg, _, Œª h, h.1.add h.2‚ü©,
--   rw [‚Üê indicator_add_eq_left h],
--   conv { congr, skip, rw [‚Üê indicator_add_eq_right h] },
--   exact ‚ü®hfg.indicator $ hf $ is_measurable_singleton 0, _‚ü©,
--   rw [integrable_indicator_iff (hf (is_measurable_singleton 0)).compl],
--   rw [integrable_indicator_iff (hg (is_measurable_singleton 0)).compl],
--   exact ‚ü®hfg.integrable_on, hfg.integrable_on‚ü©
-- end

-- lemma integrable.induction {P : (Œ± ‚Üí E) ‚Üí Prop}
--   (h_ind : ‚àÄ (c : E) ‚¶És‚¶Ñ, is_measurable s ‚Üí integrable (indicator s (Œª _, c)) Œº ‚Üí P (indicator s (Œª _, c)))
--   (h_sum : ‚àÄ ‚¶Éf g‚¶Ñ, measurable f ‚Üí integrable f Œº ‚Üí measurable g ‚Üí integrable g Œº ‚Üí P f ‚Üí P g ‚Üí
--     P (f + g))
--   (h_closed : is_closed {f : Œ± ‚Üí‚ÇÅ[Œº] E | P f} )
--   (h_ae : ‚àÄ ‚¶Éf g‚¶Ñ, f =·µê[Œº] g ‚Üí P f ‚Üí P g) :
--   ‚àÄ ‚¶Éf : Œ± ‚Üí E‚¶Ñ (hf : measurable f) (h2f : integrable f Œº), P f :=
-- begin
--   have : ‚àÄ (f : simple_func Œ± E), integrable f Œº ‚Üí P f,
--   { refine simple_func.induction _ _,
--     { exact h_ind  },
--     { },
--     --
--       },
--   have : ‚àÄ (f : Œ± ‚Üí‚ÇÅ‚Çõ[Œº] E), P f,
--   { intro f, exact h_ae f.to_simple_func_eq_to_fun (this f.to_simple_func) },
--   have : ‚àÄ (f : Œ± ‚Üí‚ÇÅ[Œº] E), P f :=
--     Œª f, l1.simple_func.dense_range.induction_on f h_closed this,
--   exact h_ae (l1.to_fun_of_fun f hf h2f) (this (l1.of_fun f hf h2f))
-- end

-- lemma integral_indicator (f : Œ± ‚Üí E) {s : set Œ±} (hs : is_measurable s) :
--   ‚à´ x, s.indicator f x ‚àÇŒº = ‚à´ x in s, f x ‚àÇŒº :=
-- begin
--   sorry
-- end

lemma measurable.congr' {f g : Œ± ‚Üí Œ≤} {s : set Œ±} {y : Œ≤} (hs : is_measurable s)
  (h : ‚àÄ x ‚àà s, f x = g x) (hg : measurable g) (hf : ‚àÄ x ‚àâ s, f x = y)
  : measurable f :=
begin
  intros t ht,
  by_cases hy : y ‚àà t,
  { convert (hg ht).union hs.compl, ext x, by_cases hx : x ‚àà s; simp * },
  { convert (hg ht).inter hs, ext x, by_cases hx : x ‚àà s; simp * }
end

-- lemma measurable_integral_congr_ae {f : Œ± √ó Œ≤ ‚Üí E} {h : Œ± ‚Üí E}
--   (h : integrable)
--    (hg : measurable (Œª x, ‚à´ y, g (x, y) ‚àÇŒΩ)) :
--     measurable (Œª x, ‚à´ y, f (x, y) ‚àÇŒΩ) :=
-- begin

-- end
--

lemma measurable_to_real : measurable ennreal.to_real :=
begin
  sorry
end

lemma measurable.to_real {f : Œ± ‚Üí ennreal} (hf : measurable f) : measurable (Œª x, ennreal.to_real (f x)) :=
measurable_to_real.comp hf

lemma set_of_compl {p : Œ± ‚Üí Prop} : {x | p x}·∂ú = {x | ¬¨ p x } := rfl

lemma is_closed_le_prod [topological_space Œ±] [partial_order Œ±] [t : order_closed_topology Œ±] [second_countable_topology Œ±] : is_closed {p : Œ± √ó Œ± | p.1 ‚â§ p.2} :=
t.is_closed_le'

lemma is_open_lt_prod [topological_space Œ±] [linear_order Œ±] [t : order_closed_topology Œ±] [second_countable_topology Œ±] : is_open {p : Œ± √ó Œ± | p.1 < p.2} :=
by { simp_rw [‚Üê is_closed_compl_iff, set_of_compl, not_lt],
     exact is_closed_le continuous_snd continuous_fst }

lemma is_measurable_lt' [topological_space Œ±] [opens_measurable_space Œ±] [linear_order Œ±] [order_closed_topology Œ±] [second_countable_topology Œ±] : is_measurable {p : Œ± √ó Œ± | p.1 < p.2} :=
is_open_lt_prod.is_measurable

lemma is_measurable_lt [topological_space Œ±] [opens_measurable_space Œ±] [linear_order Œ±] [order_closed_topology Œ±] [second_countable_topology Œ±] {f g : Œ≤ ‚Üí Œ±} (hf : measurable f) (hg : measurable g) :
  is_measurable {a | f a < g a} :=
hf.prod_mk hg is_measurable_lt'

lemma is_measurable.integrable [sigma_finite ŒΩ univ] ‚¶Éf : Œ± ‚Üí Œ≤ ‚Üí E‚¶Ñ (hf : measurable (uncurry f)) :
  is_measurable { x | integrable (f x) ŒΩ } :=
begin
  simp [integrable, and_iff_right hf.of_uncurry_left],
  refine is_measurable_lt (measurable.lintegral_prod_right' _) measurable_const,
  exact hf.ennnorm
end

open filter
#print Pi.topological_space
#print metric.inf_dist

lemma measurable_of_is_open [topological_space Œ≤] [borel_space Œ≤] {f : Œ± ‚Üí Œ≤}
  (hf : ‚àÄ s, is_open s ‚Üí is_measurable (f ‚Åª¬π' s)) : measurable f :=
by { rw [‚Äπborel_space Œ≤‚Ä∫.measurable_eq], exact measurable_generate_from hf }

lemma measurable_of_is_closed [topological_space Œ≤] [borel_space Œ≤] {f : Œ± ‚Üí Œ≤}
  (hf : ‚àÄ s, is_closed s ‚Üí is_measurable (f ‚Åª¬π' s)) : measurable f :=
begin
  apply measurable_of_is_open, intros s hs,
  rw [‚Üê is_measurable.compl_iff, ‚Üê preimage_compl], apply hf, rw [is_closed_compl_iff], exact hs
end

lemma measurable_of_is_closed' [topological_space Œ≤] [borel_space Œ≤] {f : Œ± ‚Üí Œ≤}
  (hf : ‚àÄ s, is_closed s ‚Üí s.nonempty ‚Üí s ‚â† univ ‚Üí is_measurable (f ‚Åª¬π' s)) : measurable f :=
begin
  apply measurable_of_is_closed, intros s hs,
  cases eq_empty_or_nonempty s with h1 h1, { simp [h1] },
  by_cases h2 : s = univ, { simp [h2] },
  exact hf s hs h1 h2
end
open metric emetric

lemma measurable_inf_edist [emetric_space Œ±] [opens_measurable_space Œ±] {A : set Œ±} :
  measurable (Œª x, inf_edist x A) :=
continuous_inf_edist.measurable

lemma measurable.inf_edist [emetric_space Œ≤] [opens_measurable_space Œ≤] {f : Œ± ‚Üí Œ≤}
  (hf : measurable f) {A : set Œ≤} : measurable (Œª x, inf_edist (f x) A) :=
measurable_inf_edist.comp hf

lemma measurable_inf_dist [metric_space Œ±] [opens_measurable_space Œ±] {A : set Œ±} :
  measurable (Œª x, inf_dist x A) :=
(continuous_inf_dist_pt A).measurable

lemma measurable.inf_dist [metric_space Œ≤] [opens_measurable_space Œ≤] {f : Œ± ‚Üí Œ≤}
  (hf : measurable f) {A : set Œ≤} : measurable (Œª x, inf_dist (f x) A) :=
measurable_inf_dist.comp hf

lemma measurable_inf_nndist [metric_space Œ±] [opens_measurable_space Œ±] {A : set Œ±} :
  measurable (Œª x, inf_nndist x A) :=
(continuous_inf_nndist_pt A).measurable

lemma measurable.inf_nndist [metric_space Œ≤] [opens_measurable_space Œ≤] {f : Œ± ‚Üí Œ≤}
  (hf : measurable f) {A : set Œ≤} : measurable (Œª x, inf_nndist (f x) A) :=
measurable_inf_nndist.comp hf

section
variables {Œ¥ : Type*} [topological_space Œ±] [borel_space Œ±] [measurable_space Œ¥]

lemma measurable_bsupr' [complete_linear_order Œ±] [order_topology Œ±] [second_countable_topology Œ±]
  {Œπ} (s : set Œπ) (f : Œπ ‚Üí Œ¥ ‚Üí Œ±) (hf : ‚àÄ i, measurable (f i)) (hs : countable s) :
  measurable (Œª b, ‚®Ü i ‚àà s, f i b) :=
by { haveI : encodable s := hs.to_encodable, simp only [supr_subtype'],
     exact measurable_supr (Œª i, hf i) }

lemma measurable_binfi' [complete_linear_order Œ±] [order_topology Œ±] [second_countable_topology Œ±]
  {Œπ} (s : set Œπ) {f : Œπ ‚Üí Œ¥ ‚Üí Œ±} (hf : ‚àÄ i, measurable (f i)) (hs : countable s) :
  measurable (Œª b, ‚®Ö i ‚àà s, f i b) :=
by { haveI : encodable s := hs.to_encodable, simp only [infi_subtype'],
     exact measurable_infi (Œª i, hf i) }

end

lemma measurable_liminf {Œπ} [complete_lattice Œ≤] {f : Œπ ‚Üí Œ± ‚Üí Œ≤} {u : filter Œπ}
  (hf : ‚àÄ i, measurable (f i)) :
  measurable (Œª x, liminf u (Œª i, f i x)) :=
by { simp_rw [liminf, Liminf, Sup_eq_supr], sorry } -- conditions needed?

instance foo {Œ±} [conditionally_complete_linear_order_bot Œ±] : conditionally_complete_linear_order Œ± :=
{ .._inst_9 }

-- this can probably be used in `ennreal_equiv_sum`
lemma measurable_to_nnreal : measurable ennreal.to_nnreal :=
ennreal.measurable_of_measurable_nnreal measurable_id

lemma measurable.to_nnreal [measurable_space Œ±] {f : Œ± ‚Üí ennreal} (hf : measurable f) :
  measurable (Œª x, (f x).to_nnreal) :=
measurable_to_nnreal.comp hf

lemma measurable_ennreal_coe_iff [measurable_space Œ±] {f : Œ± ‚Üí nnreal} :
  measurable (Œª x, (f x : ennreal)) ‚Üî measurable f :=
‚ü®Œª h, h.to_nnreal, Œª h, h.ennreal_coe‚ü©

namespace ennreal
lemma coe_liminf {Œπ} {f : Œπ ‚Üí nnreal} (u : filter Œπ) :
  (‚Üë(liminf u f) : ennreal) = liminf u (Œª x, (f x : ennreal)) :=
begin
  sorry
end
end ennreal

lemma tendsto_pi {Œπ Œ± Œ≤ : Type*} [topological_space Œ≤] {f : Œπ ‚Üí Œ± ‚Üí Œ≤} {g : Œ± ‚Üí Œ≤} {u : filter Œπ} :
  tendsto f u (nhds g) ‚Üî ‚àÄ x, tendsto (Œª i, f i x) u (nhds (g x)) :=
by simp [nhds_pi, filter.tendsto_comap_iff]

lemma measurable_of_tendsto_nnreal {f : ‚Ñï ‚Üí Œ± ‚Üí nnreal} {g : Œ± ‚Üí nnreal}
  (hf : ‚àÄ i, measurable (f i)) (lim : tendsto f at_top (nhds g)) : measurable g :=
begin
  rw [tendsto_pi] at lim,
  have : (Œª x, liminf at_top (Œª n, f n x)) = g := funext (Œª x, (lim x).liminf_eq'),
  subst this,
  have : measurable (Œª x, liminf at_top (Œª n, (f n x : ennreal))) := measurable_liminf (Œª i, (hf i).ennreal_coe),
  simp_rw [‚Üê measurable_ennreal_coe_iff, ennreal.coe_liminf], exact this
end

lemma measurable_of_tendsto_metric [metric_space Œ≤] [borel_space Œ≤] {f : ‚Ñï ‚Üí Œ± ‚Üí Œ≤} {g : Œ± ‚Üí Œ≤}
  (hf : ‚àÄ i, measurable (f i)) (lim : tendsto f at_top (nhds g)) : measurable g :=
begin
  apply measurable_of_is_closed', intros s h1s h2s h3s,
  have : measurable (Œªx, inf_nndist (g x) s),
  { apply measurable_of_tendsto_nnreal (Œª i, (hf i).inf_nndist),
    rw [tendsto_pi], rw [tendsto_pi] at lim, intro x,
    exact ((continuous_inf_nndist_pt s).tendsto (g x)).comp (lim x) },
    have h4s : g ‚Åª¬π' s = (Œª x, inf_nndist (g x) s) ‚Åª¬π' {0},
    { ext x, simp [h1s, ‚Üê mem_iff_inf_dist_zero_of_closed h1s h2s, ‚Üê nnreal.coe_eq_zero] },
    rw [h4s], exact this (is_measurable_singleton 0),
end


#print measurable_of_tendsto_metric

/-- The Bochner intergral is measurable. This shows that the integrand of (the right-hand-side of)
  Fubini's theorem is measurable. -/
lemma measurable.integral_prod_left [sigma_finite ŒΩ univ] ‚¶Éf : Œ± ‚Üí Œ≤ ‚Üí E‚¶Ñ
  (hf : measurable (uncurry f)) : measurable (Œª x, ‚à´ y, f x y ‚àÇŒΩ) :=
begin
  have : ‚àÄ x, measurable (f x) := Œª x, hf.of_uncurry_left,
  have := Œª x, simple_func_sequence_tendsto (this x),
  choose s h1s h2s using this,
  let f' : ‚Ñï ‚Üí Œ± ‚Üí E := Œª n, {x | integrable (f x) ŒΩ}.indicator (Œª x, (s x n).integral ŒΩ),
  have hf' : ‚àÄ n, measurable (f' n),
  { intro n, refine measurable.indicator _ (is_measurable.integrable hf),  },
  have h2f' : tendsto f' at_top (nhds (Œª (x : Œ±), ‚à´ (y : Œ≤), f x y ‚àÇŒΩ)),
  { rw [tendsto_pi], intro x,  },
  exact measurable_of_tendsto_metric hf' h2f'
end

/-
proof -



  have "‚ãÄi. s i ‚àà measurable (N ‚®Ç‚á©M M) (count_space UNIV)"
    by (rule measurable_simple_function) fact

  { fix i x assume "x ‚àà space N"
    then have "simple_bochner_integral M (Œªy. s i (x, y)) =
      (‚àëz‚ààs i ` (space N √ó space M). measure M {y ‚àà space M. s i (x, y) = z} *‚á©R z)"
      using s(1)[THEN simple_functionD(1)]
      unfolding simple_bochner_integral_def
      by (intro sum.mono_neutral_cong_left)
         (auto simp: eq_commute space_pair_measure image_iff cong: conj_cong) }
  note eq = this

  show ?thesis
  proof (rule borel_measurable_LIMSEQ_metric)
    fix i show "f' i ‚àà borel_measurable N"
      unfolding f'_def by (simp_all add: eq cong: measurable_cong if_cong)
  next
    fix x assume x: "x ‚àà space N"
    { assume int_f: "integrable M (f x)"
      have int_2f: "integrable M (Œªy. 2 * norm (f x y))"
        by (intro integrable_norm integrable_mult_right int_f)
      have "(Œªi. integral‚áßL M (Œªy. s i (x, y))) ‚á¢ integral‚áßL M (f x)"
      proof (rule integral_dominated_convergence)
        from int_f show "f x ‚àà borel_measurable M" by auto
        show "‚ãÄi. (Œªy. s i (x, y)) ‚àà borel_measurable M"
          using x by simp
        show "AE xa in M. (Œªi. s i (x, xa)) ‚á¢ f x xa"
          using x s(2) by auto
        show "‚ãÄi. AE xa in M. norm (s i (x, xa)) ‚â§ 2 * norm (f x xa)"
          using x s(3) by auto
      qed fact
      moreover
      { fix i
        have "simple_bochner_integrable M (Œªy. s i (x, y))"
        proof (rule simple_bochner_integrableI_bounded)
          have "(Œªy. s i (x, y)) ` space M ‚äÜ s i ` (space N √ó space M)"
            using x by auto
          then show "simple_function M (Œªy. s i (x, y))"
            using simple_functionD(1)[OF s(1), of i] x
            by (intro simple_function_borel_measurable)
               (auto simp: space_pair_measure dest: finite_subset)
          have "(‚à´‚áß+ y. ennreal (norm (s i (x, y))) ‚àÇM) ‚â§ (‚à´‚áß+ y. 2 * norm (f x y) ‚àÇM)"
            using x s by (intro nn_integral_mono) auto
          also have "(‚à´‚áß+ y. 2 * norm (f x y) ‚àÇM) < ‚àû"
            using int_2f unfolding integrable_iff_bounded by simp
          finally show "(‚à´‚áß+ xa. ennreal (norm (s i (x, xa))) ‚àÇM) < ‚àû" .
        qed
        then have "integral‚áßL M (Œªy. s i (x, y)) = simple_bochner_integral M (Œªy. s i (x, y))"
          by (rule simple_bochner_integrable_eq_integral[symmetric]) }
      ultimately have "(Œªi. simple_bochner_integral M (Œªy. s i (x, y))) ‚á¢ integral‚áßL M (f x)"
        by simp }
    then
    show "(Œªi. f' i x) ‚á¢ integral‚áßL M (f x)"
      unfolding f'_def
      by (cases "integrable M (f x)") (simp_all add: not_integrable_integral_eq)
  qed
qed
-/


lemma integrable_prod_iff [sigma_finite ŒΩ univ] ‚¶Éf : Œ± √ó Œ≤ ‚Üí E‚¶Ñ (h1f : measurable f) :
  (‚àÄ·µê x ‚àÇ Œº, integrable (Œª y, f (x, y)) ŒΩ) ‚àß integrable (Œª x, ‚à´ y, f (x, y) ‚àÇŒΩ) Œº ‚Üî integrable f (Œº.prod ŒΩ) :=
sorry

/-- Fubini's Theorem: For integrable functions on `Œ± √ó Œ≤`,
  the Bochner integral of `f` is equal to the iterated Bochner integral. -/
lemma integrable_integral_prod_left [sigma_finite ŒΩ univ] :
  ‚àÄ ‚¶Éf : Œ± √ó Œ≤ ‚Üí E‚¶Ñ (h1f : measurable f) (h2f : integrable f (Œº.prod ŒΩ)),
    measurable (Œª x, ‚à´ y, f (x, y) ‚àÇŒΩ) :=
begin
  sorry
end

/-- Fubini's Theorem: For integrable functions on `Œ± √ó Œ≤`,
  the Bochner integral of `f` is equal to the iterated Bochner integral. -/
lemma integral_prod [sigma_finite ŒΩ univ] :
  ‚àÄ ‚¶Éf : Œ± √ó Œ≤ ‚Üí E‚¶Ñ (h1f : measurable f) (h2f : integrable f (Œº.prod ŒΩ)),
  ‚à´ z, f z ‚àÇ(Œº.prod ŒΩ) = ‚à´ x, ‚à´ y, f (x, y) ‚àÇŒΩ ‚àÇŒº :=
begin
  sorry
end

end measure

end

end measure_theory
