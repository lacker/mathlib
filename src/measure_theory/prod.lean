/-
Copyright (c) 2020 Floris van Doorn. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Floris van Doorn
-/
import measure_theory.giry_monad
import measure_theory.set_integral
import topology.list

/-!
# The product measure space

TODO:

variants of Fubini
finitary products

-/
noncomputable theory
open_locale classical big_operators nnreal topological_space filter
open function set measure_theory.outer_measure measurable_space topological_space (hiding generate_from)
  filter (hiding prod_eq map)

namespace function

-- example {Œπ : Type*} {Œ± : Œπ ‚Üí Type*} (i : Œπ) (g : (Œ† i, Œ± i) ‚Üí Œ± i) (s : set (Œ† i, Œ± i)) :
--   eval i '' s = g '' s :=
-- begin
--   success_if_fail { simp only [eval_apply] },
--   simp, -- why does this simplify?
--   sorry
-- end

end function
open function


namespace set

section

variables {Œ± Œ≤ Œ≥ : Type*} (s : Œ± ‚Üí set Œ≤) {t : Œ± ‚Üí set Œ≥}

/-- The union of `s y` for `y ‚â§ x`. -/
def accumulate [has_le Œ±] (x : Œ±) : set Œ≤ := ‚ãÉ y ‚â§ x, s y

variable {s}
lemma accumulate_def [has_le Œ±] {x : Œ±} : accumulate s x = ‚ãÉ y ‚â§ x, s y := rfl
@[simp] lemma mem_accumulate [has_le Œ±] {x : Œ±} {z : Œ≤} : z ‚àà accumulate s x ‚Üî ‚àÉ y ‚â§ x, z ‚àà s y :=
mem_bUnion_iff

lemma subset_accumulate [preorder Œ±] {x : Œ±} : s x ‚äÜ accumulate s x :=
Œª z, mem_bUnion le_rfl

lemma monotone_accumulate [preorder Œ±] : monotone (accumulate s) :=
Œª x y hxy, bUnion_subset_bUnion_left $ Œª z hz, le_trans hz hxy

lemma bUnion_accumulate [preorder Œ±] (y : Œ±) : (‚ãÉ x ‚â§ y, accumulate s x) = ‚ãÉ x ‚â§ y, s x :=
begin
  apply subset.antisymm,
  { simp only [subset_def, mem_Union, exists_imp_distrib, mem_accumulate],
    intros z x hxy x' hx'x hz, exact ‚ü®x', hx'x.trans hxy, hz‚ü© },
  { exact bUnion_subset_bUnion (Œª x hx, ‚ü®x, hx, subset_accumulate‚ü©) }
end

lemma Union_accumulate [preorder Œ±] : (‚ãÉ x, accumulate s x) = ‚ãÉ x, s x :=
begin
  apply subset.antisymm,
  { simp only [subset_def, mem_Union, exists_imp_distrib, mem_accumulate],
    intros z x x' hx'x hz, exact ‚ü®x', hz‚ü© },
  { exact Union_subset_Union (Œª i, subset_accumulate),  }
end

lemma accumulate_nat (s : ‚Ñï ‚Üí set Œ≤) {n : ‚Ñï} : accumulate s n = ‚ãÉ y ‚àà finset.range (n+1), s y :=
by { ext, simp [nat.lt_succ_iff] }

lemma Union_prod_of_monotone [semilattice_sup Œ±] (hs : monotone s) (ht : monotone t) :
  (‚ãÉ x, (s x).prod (t x)) = (‚ãÉ x, (s x)).prod (‚ãÉ x, (t x)) :=
begin
  ext ‚ü®z, w‚ü©, simp only [mem_prod, mem_Union, exists_imp_distrib, and_imp, iff_def], split,
  { intros x hz hw, exact ‚ü®‚ü®x, hz‚ü©, ‚ü®x, hw‚ü©‚ü© },
  { intros x hz x' hw, exact ‚ü®x ‚äî x', hs le_sup_left hz, ht le_sup_right hw‚ü© }
end

end

-- lemma if_eq_piecewise {Œ± : Type*} {Œ≤ : Œ± ‚Üí Sort*} (p : Œ± ‚Üí Prop) (f g : Œ†i, Œ≤ i) [decidable_pred p] :
--   (Œª x, if p x then f x else g x) = {x | p x}.piecewise f g :=
-- rfl

variables {Œ± Œ≤ : Type*} {f : Œ± ‚Üí Œ≤} {s : set Œ±}

theorem forall_image_iff {p : Œ≤ ‚Üí Prop} : (‚àÄ y ‚àà f '' s, p y) ‚Üî (‚àÄ x ‚àà s, p (f x)) :=
by { simp only [mem_image, exists_imp_distrib, @forall_swap Œ≤, and_imp, imp.swap],
  apply forall_congr, intro x, simp only [forall_eq'] }

lemma set_of_compl {p : Œ± ‚Üí Prop} : {x | p x}·∂ú = {x | ¬¨ p x } := rfl

@[simp] lemma univ_disjoint : disjoint univ s ‚Üî s = ‚àÖ :=
by simp [set.disjoint_iff_inter_eq_empty]

@[simp] lemma disjoint_univ : disjoint s univ ‚Üî s = ‚àÖ :=
by simp [set.disjoint_iff_inter_eq_empty]

-- fix: disjoint_singleton_left simp
-- fix: rename disjoint.preimage [remove set.]
lemma preimage_eq_empty {f : Œ± ‚Üí Œ≤} {s : set Œ≤} (h : disjoint s (range f)) :
  f ‚Åª¬π' s = ‚àÖ :=
by simpa using disjoint.preimage f h

lemma preimage_eq_empty_iff {f : Œ± ‚Üí Œ≤} {s : set Œ≤} : disjoint s (range f) ‚Üî f ‚Åª¬π' s = ‚àÖ :=
‚ü®preimage_eq_empty, Œª h, by { simp [eq_empty_iff_forall_not_mem, set.disjoint_iff_inter_eq_empty] at h ‚ä¢, finish }‚ü©

theorem preimage_swap_prod {s : set Œ±} {t : set Œ≤} : prod.swap ‚Åª¬π' t.prod s = s.prod t :=
by { ext ‚ü®x, y‚ü©, simp [and_comm] }


end set
open set
section
variables {Œ± Œ≤ Œ≥ : Type*}

namespace pi
lemma const_def {y : Œ≤} : (Œª x : Œ±, y) = const Œ± y := rfl

end pi

end

namespace canonically_ordered_semiring
variables {Œ± : Type*} [canonically_ordered_comm_semiring Œ±]

end canonically_ordered_semiring

namespace finset

/-- If `g, h ‚â§ f` and `g i + h i ‚â§ f i`, then the product of `f` is at least the sum of the
  products of `g` and `h`. This is the version for `linear_ordered_comm_ring`. -/
lemma prod_univ_add_prod_univ_le {Œ± Œ≤} [fintype Œ±] [linear_ordered_comm_ring Œ≤] (i : Œ±)
  {f g h : Œ± ‚Üí Œ≤} (h2i : g i + h i ‚â§ f i) (hgf : ‚àÄ j ‚â† i, g j ‚â§ f j)
  (hhf : ‚àÄ j ‚â† i, h j ‚â§ f j) (hg : ‚àÄ i, 0 ‚â§ g i) (hh : ‚àÄ i, 0 ‚â§ h i) :
  ‚àè i, g i + ‚àè i, h i ‚â§ ‚àè i, f i :=
prod_add_prod_le (mem_univ i) h2i (Œª j _, hgf j) (Œª j _, hhf j) (Œª j _, hg j) (Œª j _, hh j)

/-- If `g, h ‚â§ f` and `g i + h i ‚â§ f i`, then the product of `f` is at least the sum of the
  products of `g` and `h`. This is the version for `canonically_ordered_comm_semiring`. -/
lemma prod_univ_add_prod_univ_le' {Œ± Œ≤} [fintype Œ±] [canonically_ordered_comm_semiring Œ≤] (i : Œ±)
  {f g h : Œ± ‚Üí Œ≤} (h2i : g i + h i ‚â§ f i) (hgf : ‚àÄ j ‚â† i, g j ‚â§ f j)
  (hhf : ‚àÄ j ‚â† i, h j ‚â§ f j) : ‚àè i, g i + ‚àè i, h i ‚â§ ‚àè i, f i :=
prod_add_prod_le' (mem_univ i) h2i (Œª j _, hgf j) (Œª j _, hhf j)

end finset

namespace ennreal

lemma of_real_le_of_le_to_real {a : ‚Ñù} {b : ennreal} (h : a ‚â§ ennreal.to_real b) :
  ennreal.of_real a ‚â§ b :=
(of_real_le_of_real h).trans of_real_to_real_le

lemma mul_lt_top_iff {a b : ennreal} : a * b < ‚ä§ ‚Üî (a < ‚ä§ ‚àß b < ‚ä§) ‚à® a = 0 ‚à® b = 0 :=
begin
  split,
  { intro h, rw [‚Üê or_assoc, or_iff_not_imp_right, or_iff_not_imp_right], intros hb ha,
    exact ‚ü®lt_top_of_mul_lt_top_left h hb, lt_top_of_mul_lt_top_right h ha‚ü© },
  { rintro (‚ü®ha, hb‚ü©|rfl|rfl); [exact mul_lt_top ha hb, simp, simp] }
end

-- fix: rename, and let other one be continuous_coe_iff (also use this once)
lemma continuous_coe' : continuous (coe : nnreal ‚Üí ennreal) :=
embedding_coe.continuous

end ennreal

section norm

lemma norm_eq_self {x : ‚Ñù} (hx : 0 ‚â§ x) : ‚à• x ‚à• = x :=
by { rw [real.norm_eq_abs, abs_of_nonneg hx] }

lemma nnnorm_coe_eq_self {x : nnreal} : nnnorm (x : ‚Ñù) = x :=
by { ext, exact norm_eq_self (zero_le x) }

lemma nnnorm_eq_self {x : ‚Ñù} (hx : 0 ‚â§ x) : nnnorm x = ‚ü®x, hx‚ü© :=
@nnnorm_coe_eq_self ‚ü®x, hx‚ü©

lemma ennnorm_eq_of_real {x : ‚Ñù} (hx : 0 ‚â§ x) : (nnnorm x : ennreal) = ennreal.of_real x :=
by { rw [‚Üê of_real_norm_eq_coe_nnnorm, norm_eq_self hx] }

end norm

namespace filter

open filter

section
variables {Œ± Œ≤ Œπ : Type*} [complete_lattice Œ±]

theorem has_basis.Liminf_eq_supr_Inf {p : Œπ ‚Üí Prop} {s : Œπ ‚Üí set Œ±} {f : filter Œ±}
  (h : f.has_basis p s) : f.Liminf = ‚®Ü i (hi : p i), Inf (s i) :=
@has_basis.Limsup_eq_infi_Sup (order_dual Œ±) _ _ _ _ _ h

theorem has_basis.limsup_eq_infi_supr {p : Œπ ‚Üí Prop} {s : Œπ ‚Üí set Œ≤} {f : filter Œ≤} {u : Œ≤ ‚Üí Œ±}
  (h : f.has_basis p s) : f.limsup u = ‚®Ö i (hi : p i), ‚®Ü a ‚àà s i, u a :=
(h.map u).Limsup_eq_infi_Sup.trans $ by simp only [Sup_image, id]

theorem has_basis.liminf_eq_supr_infi {p : Œπ ‚Üí Prop} {s : Œπ ‚Üí set Œ≤} {f : filter Œ≤} {u : Œ≤ ‚Üí Œ±}
  (h : f.has_basis p s) : f.liminf u = ‚®Ü i (hi : p i), ‚®Ö a ‚àà s i, u a :=
@has_basis.limsup_eq_infi_supr (order_dual Œ±) _ _ _ _ _ _ _ h

end

end filter

-- section filter
-- open filter

-- variables {Œ± Œ≤ : Type*} [topological_space Œ±] [conditionally_complete_linear_order Œ±] [order_topology Œ±]
-- open_locale topological_space

-- -- already moved
-- /-- If a function has a limit, then its limsup coincides with its limit. -/
-- theorem filter.tendsto.limsup_eq' {f : filter Œ≤} {u : Œ≤ ‚Üí Œ±} {a : Œ±} [ne_bot f]
--   (h : tendsto u f (ùìù a)) : limsup f u = a :=
-- Limsup_eq_of_le_nhds h

-- /-- If a function has a limit, then its liminf coincides with its limit. -/
-- theorem filter.tendsto.liminf_eq' {f : filter Œ≤} {u : Œ≤ ‚Üí Œ±} {a : Œ±} [ne_bot f]
--   (h : tendsto u f (ùìù a)) : liminf f u = a :=
-- Liminf_eq_of_le_nhds h

-- end filter

section tsum

open filter

variables {Œπ Œ± : Type*} {Œ≤ : Œ± ‚Üí Type*} [‚àÄ x, add_comm_monoid (Œ≤ x)]
  [‚àÄ x, topological_space (Œ≤ x)] {f : Œπ ‚Üí ‚àÄ x, Œ≤ x}

lemma pi.has_sum  {g : ‚àÄ x, Œ≤ x} : has_sum f g ‚Üî ‚àÄ x, has_sum (Œª i, f i x) (g x) :=
begin
  simp_rw [has_sum, nhds_pi, filter.tendsto_infi, filter.tendsto_comap_iff],
  apply forall_congr, intro a, congr', ext s, simp
end

lemma pi.summable : summable f ‚Üî ‚àÄ x, summable (Œª i, f i x) :=
by simp [summable, pi.has_sum, classical.skolem]

lemma tsum_apply [‚àÄ x, t2_space (Œ≤ x)] {x : Œ±} (hf : summable f) : (‚àë' i, f i) x = ‚àë' i, f i x :=
(pi.has_sum.mp hf.has_sum x).tsum_eq.symm

protected lemma ennreal.tsum_apply {Œπ Œ± : Type*} {f : Œπ ‚Üí Œ± ‚Üí ennreal} {x : Œ±} :
  (‚àë' i, f i) x = ‚àë' i, f i x :=
tsum_apply $ pi.summable.mpr $ Œª _, ennreal.summable

end tsum

lemma measurable_space_ennreal_def :
  generate_from (range Iio) = (by apply_instance : measurable_space ennreal) :=
(borel_eq_generate_Iio _).symm

lemma measurable_of_Iio {Œπ Œ±} [measurable_space Œπ]
  [topological_space Œ±] [second_countable_topology Œ±]
  [linear_order Œ±] [order_topology Œ±] [measurable_space Œ±] [borel_space Œ±] {f : Œπ ‚Üí Œ±}
  (hf : ‚àÄ x, is_measurable (f ‚Åª¬π' Iio x)) :
  measurable f :=
begin
  convert measurable_generate_from _,
  exact borel_space.measurable_eq.trans (borel_eq_generate_Iio _),
  rintro _ ‚ü®x, rfl‚ü©, exact hf x
end

lemma measurable_of_Ioi {Œπ Œ±} [measurable_space Œπ]
  [topological_space Œ±] [second_countable_topology Œ±]
  [linear_order Œ±] [order_topology Œ±] [measurable_space Œ±] [borel_space Œ±] {f : Œπ ‚Üí Œ±}
  (hf : ‚àÄ x, is_measurable (f ‚Åª¬π' Ioi x)) :
  measurable f :=
begin
  convert measurable_generate_from _,
  exact borel_space.measurable_eq.trans (borel_eq_generate_Ioi _),
  rintro _ ‚ü®x, rfl‚ü©, exact hf x
end

lemma measurable_of_Iic {Œπ Œ±} [measurable_space Œπ]
  [topological_space Œ±] [second_countable_topology Œ±]
  [linear_order Œ±] [order_topology Œ±] [measurable_space Œ±] [borel_space Œ±] {f : Œπ ‚Üí Œ±}
  (hf : ‚àÄ x, is_measurable (f ‚Åª¬π' Iic x)) : measurable f :=
begin
  apply measurable_of_Ioi,
  simp_rw [‚Üê compl_Iic, preimage_compl, is_measurable.compl_iff],
  assumption
end

lemma measurable_of_Ici {Œπ Œ±} [measurable_space Œπ]
  [topological_space Œ±] [second_countable_topology Œ±]
  [linear_order Œ±] [order_topology Œ±] [measurable_space Œ±] [borel_space Œ±] {f : Œπ ‚Üí Œ±}
  (hf : ‚àÄ x, is_measurable (f ‚Åª¬π' Ici x)) : measurable f :=
begin
  apply measurable_of_Iio,
  simp_rw [‚Üê compl_Ici, preimage_compl, is_measurable.compl_iff],
  assumption
end

-- section
-- open filter
-- lemma has_countable_basis_at_top_ennreal :
--   has_countable_basis (at_top : filter ennreal) (Œª x : ennreal, x.to_real ‚àà range (coe : ‚Ñö ‚Üí ‚Ñù)) Iic :=
-- _

-- lemma countable_basis_elim {Œπ Œπ' Œ± Œ≤ : Type*} [preorder Œπ] [preorder Œ≤] {p : Œπ' ‚Üí Prop} {q : Œπ' ‚Üí Œπ}
--   (h : has_countable_basis (at_top : filter Œπ) p (Iic ‚àò q)) (f : Œπ ‚Üí Œ± ‚Üí Œ≤) {y : Œ≤} :
--   (‚ãÇ (i : Œπ), {x : Œ± | f i x ‚â§ y}) = (‚ãÇ (i' : Œπ') (h : p i'), {x : Œ± | f (q i') x ‚â§ y}) :=
-- begin

-- end


-- lemma measurable_supr' {Œπ Œπ' Œ± Œ≤ : Type*} [preorder Œπ] {p : Œπ' ‚Üí Prop} {q : Œπ' ‚Üí set Œπ}
--   (h : has_countable_basis (at_top : filter Œπ) p q) [measurable_space Œ±]
--   [measurable_space Œ≤] [topological_space Œ≤] [second_countable_topology Œ≤] [complete_linear_order Œ≤]
--   [borel_space Œ≤] [order_topology Œ≤]
--   (f : Œπ ‚Üí Œ± ‚Üí Œ≤) (h : ‚àÄ i, measurable (f i)) : measurable (Œª x, ‚®Ü i, f i x) :=
-- begin
--   apply measurable_of_Iic, simp only [preimage, ‚ÜêInter_set_of, supr_le_iff, mem_Iic], intro y,
--   sorry
--   -- apply is_measurable.Inter, intro i, exact h i is_measurable_Iic
-- end

-- lemma measurable_infi' {Œπ Œ± Œ≤ : Type*} [encodable Œπ] [measurable_space Œ±]
--   [measurable_space Œ≤] [topological_space Œ≤] [second_countable_topology Œ≤] [complete_linear_order Œ≤]
--   [borel_space Œ≤] [order_topology Œ≤]
--   (f : Œπ ‚Üí Œ± ‚Üí Œ≤) (h : ‚àÄ i, measurable (f i)) : measurable (Œª x, ‚®Ö i, f i x) :=
-- begin
--   apply measurable_of_Ici, simp only [preimage, ‚ÜêInter_set_of, le_infi_iff, mem_Ici], intro y,
--   apply is_measurable.Inter, intro i, exact h i is_measurable_Ici
-- end

-- end

-- lemma measurable.sum {Œπ Œ± Œ≤} [measurable_space Œ±] [measurable_space Œ≤] [add_comm_monoid Œ≤]
--   [topological_space Œ≤] [has_continuous_add Œ≤] [borel_space Œ≤] [second_countable_topology Œ≤]
--   (f : Œπ ‚Üí Œ± ‚Üí Œ≤) (h : ‚àÄ i, measurable (f i)) (s : finset Œπ) : measurable (Œª x, ‚àë i in s, f i x) :=
-- begin
--   refine s.induction_on (by simp [measurable_zero]) _,
--   intros i t hi hf, have := (h i).add hf, simpa [finset.sum_insert, hi]
-- end

/-- todo: `ennreal` can probably be generalized to a
[measurable_space Œ≤] [topological_space Œ≤] [add_comm_monoid Œ≤] [has_continuous_add Œ≤]
  [borel_space Œ≤] -/
lemma measurable.ennreal_tsum {Œπ Œ±} [encodable Œπ] [measurable_space Œ±]
  {f : Œπ ‚Üí Œ± ‚Üí ennreal} (h : ‚àÄ i, measurable (f i)) : measurable (Œª x, ‚àë' i, f i x) :=
by { simp_rw [ennreal.tsum_eq_supr_sum], apply measurable_supr, exact Œª s, s.measurable_sum h }
















section complete_lattice

variables {Œπ : Sort*} {Œ± : Type*} {x : Œ±} [complete_lattice Œ±]
lemma supr_const_le : (‚®Ü (h : Œπ), x) ‚â§ x :=
supr_le (Œª _, le_rfl)

lemma le_infi_const : x ‚â§ (‚®Ö (h : Œπ), x) :=
le_infi (Œª _, le_rfl)

end complete_lattice

section metric
open metric emetric
variables {Œ± : Type*} [metric_space Œ±] {x : Œ±} {s : set Œ±}

/-- The minimal distance of a point to a set as a `nnreal` -/
def inf_nndist (x : Œ±) (s : set Œ±) : ‚Ñù‚â•0 := ennreal.to_nnreal (inf_edist x s)
@[simp] lemma coe_inf_nndist : (inf_nndist x s : ‚Ñù) = inf_dist x s := rfl

-- @[simp] lemma inf_nndist_eq_zero : (inf_nndist x s : ‚Ñù) = inf_dist x s := rfl

/-- The minimal distance to a set (as `nnreal`) is Lipschitz in point with constant 1 -/
lemma lipschitz_inf_nndist_pt (s : set Œ±) : lipschitz_with 1 (Œªx, inf_nndist x s) :=
lipschitz_with.of_le_add $ Œª x y, inf_dist_le_inf_dist_add_dist

/-- The minimal distance to a set (as `nnreal`) is uniformly continuous in point -/
lemma uniform_continuous_inf_nndist_pt (s : set Œ±) :
  uniform_continuous (Œªx, inf_nndist x s) :=
(lipschitz_inf_nndist_pt s).uniform_continuous

/-- The minimal distance to a set (as `nnreal`) is continuous in point -/
lemma continuous_inf_nndist_pt (s : set Œ±) : continuous (Œªx, inf_nndist x s) :=
(uniform_continuous_inf_nndist_pt s).continuous


end metric

section topological_space
open topological_space filter

variables {Œ± : Type*} [topological_space Œ±]

lemma is_closed_le_prod [partial_order Œ±] [t : order_closed_topology Œ±] :
  is_closed {p : Œ± √ó Œ± | p.1 ‚â§ p.2} :=
t.is_closed_le'

lemma is_open_lt_prod [linear_order Œ±] [t : order_closed_topology Œ±] :
  is_open {p : Œ± √ó Œ± | p.1 < p.2} :=
by { simp_rw [‚Üê is_closed_compl_iff, set_of_compl, not_lt],
     exact is_closed_le continuous_snd continuous_fst }

lemma tendsto_pi {Œπ Œ± Œ≤ : Type*} [topological_space Œ≤] {f : Œπ ‚Üí Œ± ‚Üí Œ≤} {g : Œ± ‚Üí Œ≤} {u : filter Œπ} :
  tendsto f u (ùìù g) ‚Üî ‚àÄ x, tendsto (Œª i, f i x) u (ùìù (g x)) :=
by simp [nhds_pi, filter.tendsto_comap_iff]


open list
@[to_additive]
lemma tendsto_prod {Œ±} [topological_space Œ±] [monoid Œ±] [has_continuous_mul Œ±] {l : list Œ±} :
  tendsto list.prod (ùìù l) (ùìù l.prod) :=
begin
  induction l with x l ih, { simp [nhds_nil, mem_of_nhds, tendsto_pure_left] {contextual := tt} },
  simp_rw [tendsto_cons_iff, prod_cons],
  have := continuous_iff_continuous_at.mp continuous_mul (x, l.prod),
  rw [continuous_at, nhds_prod_eq] at this,
  exact this.comp (tendsto_id.prod_map ih)
end

@[to_additive]
lemma continuous_prod {Œ±} [topological_space Œ±] [monoid Œ±] [has_continuous_mul Œ±] :
  continuous (prod : list Œ± ‚Üí Œ±) :=
continuous_iff_continuous_at.mpr $ Œª l, tendsto_prod

lemma tendsto_fst' {Œ± Œ≤} [topological_space Œ±] [topological_space Œ≤] {x : Œ± √ó Œ≤} :
  tendsto prod.fst (ùìù x) (ùìù x.fst) :=
continuous_iff_continuous_at.mp continuous_fst x

lemma tendsto_snd' {Œ± Œ≤} [topological_space Œ±] [topological_space Œ≤] {x : Œ± √ó Œ≤} :
  tendsto prod.snd (ùìù x) (ùìù x.snd) :=
continuous_iff_continuous_at.mp continuous_snd x

-- rename tendsto_cons tendsto_cons'
lemma continuous_cons {Œ±} [topological_space Œ±] : continuous (Œª x : Œ± √ó list Œ±, (x.1 :: x.2 : list Œ±)) :=
continuous_iff_continuous_at.mpr $ Œª x, tendsto_cons tendsto_fst' tendsto_snd'

-- lemma tendsto_list_map {Œ± Œ≤} [topological_space Œ±] [topological_space Œ≤]
--   {f : Œ± ‚Üí Œ≤} {l : list Œ±} :
--   tendsto (Œª p : (Œ± ‚Üí Œ≤) √ó list Œ±, p.2.map p.1) (ùìù f √ó·∂† ùìù l) (ùìù (l.map f)) :=
-- begin
--   induction l with x l ih,
--   { simp only [nhds_nil, list.map, tendsto_pure, list.map_eq_nil],
--     refine eventually.filter_mono inf_le_right _, simp },
--   { have : ùìù f √ó·∂† ùìù (x :: l : list Œ±) =
--       (ùìù f √ó·∂† (ùìù x √ó·∂† ùìù l)).map (Œªp : _ √ó Œ± √ó list Œ±, (p.1, p.2.1 :: p.2.2)),
--     { sorry },
--     simp_rw [this, tendsto_map'_iff, function.comp],
--     refine tendsto_cons _ (ih.comp $ tendsto_fst.prod_mk $ tendsto_snd.comp tendsto_snd),
--     refine tendsto_eval.comp (tendsto_fst.prod_mk $ tendsto_fst.comp tendsto_snd) }
-- end

-- @[to_additive]
-- lemma tendsto.list_prod {Œ± Œ≤ Œ≥} [topological_space Œ±] [monoid Œ±] [has_continuous_mul Œ±]
--   [topological_space Œ≤] [topological_space Œ≥] {f : Œ≥ ‚Üí Œ≤ ‚Üí Œ±} {u : filter Œ≤} {g : Œ≥ ‚Üí Œ±}
--   (hf : ‚àÄc, tendsto (f c) u (nhds (g c))) {l : Œ≤ ‚Üí list Œ≥} {l' : list Œ≥}
--   (hl : tendsto l u (ùìù l')) :
--   tendsto (Œª b, ((l b).map (Œªc, f c b)).prod) u (ùìù ((l'.map g).prod)) :=
-- tendsto_prod.comp $ tendsto_list_map.comp $ (tendsto_pi.mpr hf).prod_mk hl

-- @[to_additive]
-- lemma prod_congr {Œ±} [comm_monoid Œ±] ‚¶Él1 l2 : list Œ±‚¶Ñ (hl : l1 ‚âà l2) :
--   l1.prod = l2.prod :=
-- by { rw [‚Üê multiset.coe_prod, ‚Üê multiset.coe_prod], apply congr_arg, exact @quotient.sound (list Œ±) _ _ _ hl }


-- @[to_additive]
-- def multiset.prod_def {Œ±} [comm_monoid Œ±] (s : multiset Œ±) : s.prod = quotient.lift list.prod prod_congr s :=
-- by { rcases s with ‚ü®l‚ü©, simp, refl }

end topological_space


section measurable
open measure_theory

variables {Œ± Œ≤ Œ≥ : Type*} [measurable_space Œ±] [measurable_space Œ≤] [measurable_space Œ≥]
  {Œº : measure Œ±}

/- fix: rename `to_fun_of_fun` to `coe_of_fun` (in `l1`) -/
-- fix: integral_map_measure vs lintegral_map is inconsistent

lemma measurable.congr' {f g : Œ± ‚Üí Œ≤} {s : set Œ±} {y : Œ≤} (hs : is_measurable s)
  (h : ‚àÄ x ‚àà s, f x = g x) (hg : measurable g) (hf : ‚àÄ x ‚àâ s, f x = y)
  : measurable f :=
begin
  intros t ht,
  by_cases hy : y ‚àà t,
  { convert (hg ht).union hs.compl, ext x, by_cases hx : x ‚àà s; simp * },
  { convert (hg ht).inter hs, ext x, by_cases hx : x ‚àà s; simp * }
end

lemma nnreal.measurable_coe : measurable (coe : nnreal ‚Üí ‚Ñù) :=
nnreal.continuous_coe.measurable

lemma measurable_ennreal_to_real : measurable ennreal.to_real :=
ennreal.measurable_of_measurable_nnreal nnreal.measurable_coe

section
variables [normed_group Œ±] [opens_measurable_space Œ±]
lemma measurable_ennnorm : measurable (Œª x : Œ±, (nnnorm x : ennreal)) :=
measurable_nnnorm.ennreal_coe
end

lemma measurable.to_real {f : Œ± ‚Üí ennreal} (hf : measurable f) : measurable (Œª x, ennreal.to_real (f x)) :=
measurable_ennreal_to_real.comp hf

open filter

lemma measurable_of_is_open [topological_space Œ≤] [borel_space Œ≤] {f : Œ± ‚Üí Œ≤}
  (hf : ‚àÄ s, is_open s ‚Üí is_measurable (f ‚Åª¬π' s)) : measurable f :=
by { rw [‚Äπborel_space Œ≤‚Ä∫.measurable_eq], exact measurable_generate_from hf }

lemma measurable_of_is_closed [topological_space Œ≤] [borel_space Œ≤] {f : Œ± ‚Üí Œ≤}
  (hf : ‚àÄ s, is_closed s ‚Üí is_measurable (f ‚Åª¬π' s)) : measurable f :=
begin
  apply measurable_of_is_open, intros s hs,
  rw [‚Üê is_measurable.compl_iff, ‚Üê preimage_compl], apply hf, rw [is_closed_compl_iff], exact hs
end

lemma measurable_of_is_closed' [topological_space Œ≤] [borel_space Œ≤] {f : Œ± ‚Üí Œ≤}
  (hf : ‚àÄ s, is_closed s ‚Üí s.nonempty ‚Üí s ‚â† univ ‚Üí is_measurable (f ‚Åª¬π' s)) : measurable f :=
begin
  apply measurable_of_is_closed, intros s hs,
  cases eq_empty_or_nonempty s with h1 h1, { simp [h1] },
  by_cases h2 : s = univ, { simp [h2] },
  exact hf s hs h1 h2
end
open metric emetric

lemma measurable_inf_edist [emetric_space Œ±] [opens_measurable_space Œ±] {A : set Œ±} :
  measurable (Œª x, inf_edist x A) :=
continuous_inf_edist.measurable

lemma measurable.inf_edist [emetric_space Œ≤] [opens_measurable_space Œ≤] {f : Œ± ‚Üí Œ≤}
  (hf : measurable f) {A : set Œ≤} : measurable (Œª x, inf_edist (f x) A) :=
measurable_inf_edist.comp hf

lemma measurable_inf_dist [metric_space Œ±] [opens_measurable_space Œ±] {A : set Œ±} :
  measurable (Œª x, inf_dist x A) :=
(continuous_inf_dist_pt A).measurable

lemma measurable.inf_dist [metric_space Œ≤] [opens_measurable_space Œ≤] {f : Œ± ‚Üí Œ≤}
  (hf : measurable f) {A : set Œ≤} : measurable (Œª x, inf_dist (f x) A) :=
measurable_inf_dist.comp hf

lemma measurable_inf_nndist [metric_space Œ±] [opens_measurable_space Œ±] {A : set Œ±} :
  measurable (Œª x, inf_nndist x A) :=
(continuous_inf_nndist_pt A).measurable

lemma measurable.inf_nndist [metric_space Œ≤] [opens_measurable_space Œ≤] {f : Œ± ‚Üí Œ≤}
  (hf : measurable f) {A : set Œ≤} : measurable (Œª x, inf_nndist (f x) A) :=
measurable_inf_nndist.comp hf

section
variables {Œ¥ : Type*} [topological_space Œ±] [borel_space Œ±] [measurable_space Œ¥]

lemma measurable_bsupr' [complete_linear_order Œ±] [order_topology Œ±] [second_countable_topology Œ±]
  {Œπ} (s : set Œπ) (f : Œπ ‚Üí Œ¥ ‚Üí Œ±) (hs : countable s) (hf : ‚àÄ i, measurable (f i)) :
  measurable (Œª b, ‚®Ü i ‚àà s, f i b) :=
by { haveI : encodable s := hs.to_encodable, simp only [supr_subtype'],
     exact measurable_supr (Œª i, hf i) }

lemma measurable_binfi' [complete_linear_order Œ±] [order_topology Œ±] [second_countable_topology Œ±]
  {Œπ} (s : set Œπ) (f : Œπ ‚Üí Œ¥ ‚Üí Œ±) (hs : countable s) (hf : ‚àÄ i, measurable (f i)) :
  measurable (Œª b, ‚®Ö i ‚àà s, f i b) :=
by { haveI : encodable s := hs.to_encodable, simp only [infi_subtype'],
     exact measurable_infi (Œª i, hf i) }

end

lemma measurable_of_is_measurable_lt [linear_order Œ≤] [topological_space Œ≤] [second_countable_topology Œ≤]
  [order_topology Œ≤] [borel_space Œ≤] {f : Œ± ‚Üí Œ≤} (hf : ‚àÄ y, is_measurable {x | f x < y}) : measurable f :=
begin
  rw [‚Äπborel_space Œ≤‚Ä∫.measurable_eq, borel_eq_generate_Iio],
  apply measurable_generate_from, rintro _ ‚ü®y, rfl‚ü©, exact hf y
end

lemma measurable_of_is_measurable_le [linear_order Œ≤] [topological_space Œ≤] [second_countable_topology Œ≤]
  [order_topology Œ≤] [borel_space Œ≤] {f : Œ± ‚Üí Œ≤} (hf : ‚àÄ y, is_measurable {x | f x ‚â§ y}) : measurable f :=
begin
  rw [‚Äπborel_space Œ≤‚Ä∫.measurable_eq, borel_eq_generate_Ioi],
  apply measurable_generate_from, rintro _ ‚ü®y, rfl‚ü©, convert (hf y).compl, simp [set_of_compl, Ioi]
end

lemma measurable_cSup {Œπ} [conditionally_complete_linear_order Œ≤] [topological_space Œ≤]
  [second_countable_topology Œ≤] [order_topology Œ≤] [borel_space Œ≤]
  {f : Œπ ‚Üí Œ± ‚Üí Œ≤} {s : set Œπ} (hs : s.countable)
  (hf : ‚àÄ i, measurable (f i)) (bdd : ‚àÄ x, bdd_above ((Œª i, f i x) '' s)) :
  measurable (Œª x, Sup ((Œª i, f i x) '' s)) :=
begin
  cases eq_empty_or_nonempty s with h2s h2s,
  { simp [h2s, measurable_const] },
  { apply measurable_of_is_measurable_le, intro y,
    have : is_measurable {x : Œ± | ‚àÄ (i : Œπ), i ‚àà s ‚Üí f i x ‚â§ y},
    { simp_rw set_of_forall,
      exact is_measurable.bInter hs (Œª i hi, is_measurable_le (hf i) measurable_const) },
    convert this, ext x, simp_rw [cSup_le_iff (bdd x) (h2s.image _), forall_image_iff] }
end

lemma measurable_liminf' {Œπ Œπ'} [complete_linear_order Œ≤] [topological_space Œ≤] [second_countable_topology Œ≤]
  [order_topology Œ≤] [borel_space Œ≤] {f : Œπ ‚Üí Œ± ‚Üí Œ≤} {u : filter Œπ} (hf : ‚àÄ i, measurable (f i))
  {p : Œπ' ‚Üí Prop} {s : Œπ' ‚Üí set Œπ} (hu : u.has_countable_basis p s) (hs : ‚àÄ i, (s i).countable) :
  measurable (Œª x, liminf u (Œª i, f i x)) :=
begin
  simp_rw [hu.to_has_basis.liminf_eq_supr_infi],
  refine measurable_bsupr' _ _ hu.countable _,
  exact Œª i, measurable_binfi' _ _ (hs i) hf
end

lemma measurable_limsup' {Œπ Œπ'} [complete_linear_order Œ≤] [topological_space Œ≤] [second_countable_topology Œ≤]
  [order_topology Œ≤] [borel_space Œ≤] {f : Œπ ‚Üí Œ± ‚Üí Œ≤} {u : filter Œπ} (hf : ‚àÄ i, measurable (f i))
  {p : Œπ' ‚Üí Prop} {s : Œπ' ‚Üí set Œπ} (hu : u.has_countable_basis p s) (hs : ‚àÄ i, (s i).countable) :
  measurable (Œª x, limsup u (Œª i, f i x)) :=
begin
  simp_rw [hu.to_has_basis.limsup_eq_infi_supr],
  refine measurable_binfi' _ _ hu.countable _,
  exact Œª i, measurable_bsupr' _ _ (hs i) hf
end

lemma measurable_liminf [complete_linear_order Œ≤] [topological_space Œ≤] [second_countable_topology Œ≤]
  [order_topology Œ≤] [borel_space Œ≤] {f : ‚Ñï ‚Üí Œ± ‚Üí Œ≤} (hf : ‚àÄ i, measurable (f i)) :
  measurable (Œª x, liminf at_top (Œª i, f i x)) :=
measurable_liminf' hf at_top_countable_basis (Œª i, countable_encodable _)

lemma measurable_limsup [complete_linear_order Œ≤] [topological_space Œ≤] [second_countable_topology Œ≤]
  [order_topology Œ≤] [borel_space Œ≤] {f : ‚Ñï ‚Üí Œ± ‚Üí Œ≤} (hf : ‚àÄ i, measurable (f i)) :
  measurable (Œª x, limsup at_top (Œª i, f i x)) :=
measurable_limsup' hf at_top_countable_basis (Œª i, countable_encodable _)

-- @[priority 100]
-- instance foo {Œ±} [h : conditionally_complete_linear_order_bot Œ±] : conditionally_complete_linear_order Œ± :=
-- { ..h }

-- this can probably be used in `ennreal_equiv_sum`
lemma measurable_to_nnreal : measurable ennreal.to_nnreal :=
ennreal.measurable_of_measurable_nnreal measurable_id

lemma measurable.to_nnreal {f : Œ± ‚Üí ennreal} (hf : measurable f) : measurable (Œª x, (f x).to_nnreal) :=
measurable_to_nnreal.comp hf

lemma measurable_ennreal_coe_iff {f : Œ± ‚Üí nnreal} :
  measurable (Œª x, (f x : ennreal)) ‚Üî measurable f :=
‚ü®Œª h, h.to_nnreal, Œª h, h.ennreal_coe‚ü©

lemma measurable_of_tendsto_nnreal' {Œπ Œπ'} {f : Œπ ‚Üí Œ± ‚Üí nnreal} {g : Œ± ‚Üí nnreal} (u : filter Œπ)
  [ne_bot u] (hf : ‚àÄ i, measurable (f i)) (lim : tendsto f u (ùìù g)) {p : Œπ' ‚Üí Prop}
  {s : Œπ' ‚Üí set Œπ} (hu : u.has_countable_basis p s) (hs : ‚àÄ i, (s i).countable) : measurable g :=
begin
  rw [tendsto_pi] at lim, rw [‚Üê measurable_ennreal_coe_iff],
  have : (Œª x, liminf u (Œª n, (f n x : ennreal))) = Œª x, (g x : ennreal) :=
  funext (Œª x, ((ennreal.continuous_coe'.tendsto (g x)).comp (lim x)).liminf_eq),
  rw [‚Üê this],
  show measurable (Œª x, liminf u (Œª n, (f n x : ennreal))),
  exact measurable_liminf' (Œª i, (hf i).ennreal_coe) hu hs,
end

lemma measurable_of_tendsto_nnreal {f : ‚Ñï ‚Üí Œ± ‚Üí nnreal} {g : Œ± ‚Üí nnreal}
  (hf : ‚àÄ i, measurable (f i)) (lim : tendsto f at_top (ùìù g)) : measurable g :=
measurable_of_tendsto_nnreal' at_top hf lim at_top_countable_basis (Œª i, countable_encodable _)

lemma measurable_of_tendsto_metric' {Œπ Œπ'} [metric_space Œ≤] [borel_space Œ≤] {f : Œπ ‚Üí Œ± ‚Üí Œ≤} {g : Œ± ‚Üí Œ≤}
  (u : filter Œπ) [ne_bot u] (hf : ‚àÄ i, measurable (f i)) (lim : tendsto f u (ùìù g)) {p : Œπ' ‚Üí Prop}
  {s : Œπ' ‚Üí set Œπ} (hu : u.has_countable_basis p s) (hs : ‚àÄ i, (s i).countable) :
  measurable g :=
begin
  apply measurable_of_is_closed', intros s h1s h2s h3s,
  have : measurable (Œªx, inf_nndist (g x) s),
  { refine measurable_of_tendsto_nnreal' u (Œª i, (hf i).inf_nndist) _ hu hs, swap,
    rw [tendsto_pi], rw [tendsto_pi] at lim, intro x,
    exact ((continuous_inf_nndist_pt s).tendsto (g x)).comp (lim x) },
    have h4s : g ‚Åª¬π' s = (Œª x, inf_nndist (g x) s) ‚Åª¬π' {0},
    { ext x, simp [h1s, ‚Üê mem_iff_inf_dist_zero_of_closed h1s h2s, ‚Üê nnreal.coe_eq_zero] },
    rw [h4s], exact this (is_measurable_singleton 0),
end

lemma measurable_of_tendsto_metric [metric_space Œ≤] [borel_space Œ≤] {f : ‚Ñï ‚Üí Œ± ‚Üí Œ≤} {g : Œ± ‚Üí Œ≤}
  (hf : ‚àÄ i, measurable (f i)) (lim : tendsto f at_top (ùìù g)) :
  measurable g :=
measurable_of_tendsto_metric' at_top hf lim at_top_countable_basis (Œª i, countable_encodable _)

section

variables {Œ¥ : Type*} [measurable_space Œ¥] [topological_space Œ±] [borel_space Œ±]

-- use in integrable_add
@[to_additive]
lemma measurable.mul' [has_mul Œ±] [has_continuous_mul Œ±] [second_countable_topology Œ±]
  {f : Œ¥ ‚Üí Œ±} {g : Œ¥ ‚Üí Œ±} : measurable f ‚Üí measurable g ‚Üí measurable (f * g) :=
measurable.mul

end

open measure_theory measure_theory.measure

lemma measurable_measure {Œº : Œ± ‚Üí measure Œ≤} :
  measurable Œº ‚Üî ‚àÄ(s : set Œ≤) (hs : is_measurable s), measurable (Œªb, Œº b s) :=
‚ü®Œª hŒº s hs, (measurable_coe hs).comp hŒº, measurable_of_measurable_coe Œº‚ü©

lemma measurable_prod_mk_left {x : Œ±} : measurable (@prod.mk _ Œ≤ x) :=
measurable_const.prod_mk measurable_id

lemma measurable_prod_mk_right {y : Œ≤} : measurable (Œª x : Œ±, (x, y)) :=
measurable_id.prod_mk measurable_const

-- #print measurable.prod_mk
-- lemma measurable.prod_mk : measurable (@prod.mk Œ± Œ≤) :=
-- measurable_pi_lambda _ $ Œª x, measurable_prod_mk_right

lemma measurable_prod {f : Œ± ‚Üí Œ≤ √ó Œ≥} : measurable f ‚Üî
  measurable (Œªa, (f a).1) ‚àß measurable (Œªa, (f a).2) :=
‚ü®Œª hf, ‚ü®measurable_fst.comp hf, measurable_snd.comp hf‚ü©, Œª h, measurable.prod h.1 h.2‚ü©

lemma measurable_swap : measurable (prod.swap : Œ± √ó Œ≤ ‚Üí Œ≤ √ó Œ±) :=
measurable.prod measurable_snd measurable_fst

lemma measurable_swap_iff {f : Œ± √ó Œ≤ ‚Üí Œ≥} : measurable (f ‚àò prod.swap) ‚Üî measurable f :=
‚ü®Œª hf, by { convert hf.comp measurable_swap, ext ‚ü®x, y‚ü©, refl }, Œª hf, hf.comp measurable_swap‚ü©

lemma is_measurable_swap_iff {s : set (Œ± √ó Œ≤)} : is_measurable (prod.swap ‚Åª¬π' s) ‚Üî is_measurable s :=
‚ü®Œª hs, by { convert measurable_swap hs, ext ‚ü®x, y‚ü©, refl }, Œª hs, measurable_swap hs‚ü©

lemma measurable.of_uncurry_left {f : Œ± ‚Üí Œ≤ ‚Üí Œ≥} (hf : measurable (uncurry f)) {x : Œ±} :
  measurable (f x) :=
hf.comp measurable_prod_mk_left

lemma measurable.of_uncurry_right {f : Œ± ‚Üí Œ≤ ‚Üí Œ≥} (hf : measurable (uncurry f)) {y : Œ≤} :
  measurable (Œª x, f x y) :=
hf.comp measurable_prod_mk_right

variables {E : Type*} [measurable_space E] [normed_group E] [second_countable_topology E] [normed_space ‚Ñù E] [complete_space E] [borel_space E]
lemma measurable_smul_const {f : Œ± ‚Üí ‚Ñù} {c : E} (hc : c ‚â† 0) :
  measurable (Œª x, f x ‚Ä¢ c) ‚Üî measurable f :=
begin
  refine ‚ü®Œª hf, _, Œª hf, hf.smul measurable_const‚ü©,
  intros s hs,
  have : is_measurable ((Œª x, x ‚Ä¢ c) '' s) := sorry,
  convert hf this, rw [@preimage_comp _ _ _ f (‚Ä¢ c), preimage_image_eq],
  sorry
end

end measurable

namespace measure_theory

section

variables {Œ± : Type*} [measurable_space Œ±] {Œº : measure Œ±}

lemma ae_lt_top {f : Œ± ‚Üí ennreal} (hf : measurable f)
  (h2f : ‚à´‚Åª x, f x ‚àÇŒº < ‚ä§) : ‚àÄ·µê x ‚àÇŒº, f x < ‚ä§ :=
begin
  simp_rw [ae_iff, ennreal.not_lt_top], by_contra h, rw [‚Üê not_le] at h2f, apply h2f,
  have : (f ‚Åª¬π' {‚ä§}).indicator ‚ä§ ‚â§ f,
  { intro x, by_cases hx : x ‚àà f ‚Åª¬π' {‚ä§}; [simpa [hx], simp [hx]] },
  convert lintegral_mono this,
  rw [lintegral_indicator _ (hf (is_measurable_singleton ‚ä§))], simp [ennreal.top_mul, preimage, h]
end

lemma measure_Union_null_iff {Œπ} [encodable Œπ] {s : Œπ ‚Üí set Œ±} :
  Œº (‚ãÉ i, s i) = 0 ‚Üî ‚àÄ i, Œº (s i) = 0 :=
‚ü®Œª h i, measure_mono_null (subset_Union _ _) h, measure_Union_null‚ü©

end


namespace outer_measure
section bounded_by

variables {Œ± : Type*} (m : set Œ± ‚Üí ennreal)

/-- Given any function `m` assigning measures to sets, there is a unique maximal outer measure `Œº`
  satisfying `Œº s ‚â§ m s` for all `s : set Œ±`. This is the same as `outer_measure.of_function`,
  except that it doesn't require `m ‚àÖ = 0`. -/
def bounded_by : outer_measure Œ± :=
outer_measure.of_function (Œª s, ‚®Ü (h : s.nonempty), m s) (by simp [empty_not_nonempty])

variables {m}
theorem bounded_by_le (s : set Œ±) : bounded_by m s ‚â§ m s :=
(of_function_le _).trans supr_const_le

local attribute [irreducible] outer_measure.of_function
theorem bounded_by_eq_of_function (m_empty : m ‚àÖ = 0) (s : set Œ±) :
  bounded_by m s = outer_measure.of_function m m_empty s :=
begin
  have : (Œª s : set Œ±, ‚®Ü (h : s.nonempty), m s) = m,
  { ext1 t, cases t.eq_empty_or_nonempty with h h; simp [h, empty_not_nonempty, m_empty] },
  simp [bounded_by, this]
end

theorem bounded_by_eq (s : set Œ±) (m_empty : m ‚àÖ = 0) (m_mono : ‚àÄ ‚¶Ét : set Œ±‚¶Ñ, s ‚äÜ t ‚Üí m s ‚â§ m t)
  (m_subadd : ‚àÄ (s : ‚Ñï ‚Üí set Œ±), m (‚ãÉi, s i) ‚â§ (‚àë'i, m (s i))) : bounded_by m s = m s :=
by rw [bounded_by_eq_of_function m_empty, of_function_eq s m_mono m_subadd]

theorem le_bounded_by {Œº : outer_measure Œ±} : Œº ‚â§ bounded_by m ‚Üî ‚àÄ s, Œº s ‚â§ m s :=
begin
  rw [bounded_by, le_of_function, forall_congr], intro s,
  cases s.eq_empty_or_nonempty with h h; simp [h, empty_not_nonempty]
end

theorem le_bounded_by' {Œº : outer_measure Œ±} :
  Œº ‚â§ bounded_by m ‚Üî ‚àÄ s : set Œ±, s.nonempty ‚Üí Œº s ‚â§ m s :=
by { rw [le_bounded_by, forall_congr], intro s, cases s.eq_empty_or_nonempty with h h; simp [h] }

lemma bounded_by_caratheodory {m : set Œ± ‚Üí ennreal} {s : set Œ±}
  (hs : ‚àÄt, m (t ‚à© s) + m (t \ s) ‚â§ m t) : (bounded_by m).caratheodory.is_measurable' s :=
begin
  apply of_function_caratheodory, intro t,
  cases t.eq_empty_or_nonempty with h h,
  { simp [h, empty_not_nonempty] },
  { convert le_trans _ (hs t), { simp [h] }, exact add_le_add supr_const_le supr_const_le }
end

/- fix: also replace `Inf_eq_of_function_Inf_gen`. -/
end bounded_by
end outer_measure
open outer_measure measure

section measurable_pi
variables {Œ± : Type*} {Œ≤ : Œ± ‚Üí Type*} [Œ†a, measurable_space (Œ≤ a)]

lemma is_measurable.pi [encodable Œ±] {t : Œ† i, set (Œ≤ i)} (hs : ‚àÄ i, is_measurable (t i)) :
  is_measurable (pi univ t) :=
by { convert is_measurable.Inter (Œª i, measurable_pi_apply _ (hs i) : _), simp [pi_def] }

lemma measurable_update (f : Œ† (a : Œ±), Œ≤ a) {i : Œ±} : measurable (update f i) :=
begin
  apply measurable_pi_lambda,
  intro j, by_cases hj : j = i,
  { cases hj, convert measurable_id, ext, simp },
  simp_rw [update_noteq hj], apply measurable_const,
end

lemma is_measurable_pi_of_nonempty [encodable Œ±] {t : Œ† i, set (Œ≤ i)} (h : (pi univ t).nonempty) :
  is_measurable (pi univ t) ‚Üî ‚àÄ i, is_measurable (t i) :=
begin
  rcases h with ‚ü®f, hf‚ü©, refine ‚ü®Œª hst i, _, is_measurable.pi‚ü©,
  convert measurable_update f hst, rw [update_preimage_univ_pi], exact Œª j _, hf j (mem_univ j)
end

lemma is_measurable_pi [encodable Œ±] {t : Œ† i, set (Œ≤ i)} :
  is_measurable (pi univ t) ‚Üî ‚àÄ i, is_measurable (t i) ‚à® ‚àÉ i, t i = ‚àÖ :=
begin
  cases (pi univ t).eq_empty_or_nonempty with h h,
  { have := univ_pi_eq_empty_iff.mp h, simp [h, univ_pi_eq_empty_iff.mp h] },
  { simp [‚Üênot_nonempty_iff_eq_empty, univ_pi_nonempty_iff.mp h, is_measurable_pi_of_nonempty h] }
end

lemma measurable_pi {Œ≥} [measurable_space Œ≥] {f : Œ≥ ‚Üí Œ† i, Œ≤ i} :
  measurable f ‚Üî ‚àÄ x, measurable (Œª c, f c x) :=
‚ü®Œª hf x, (measurable_pi_apply _).comp hf, measurable_pi_lambda f‚ü©

end measurable_pi

section measure_pi

variables {Œπ : Type*} [fintype Œπ] {Œ± : Œπ ‚Üí Type*} {m : Œ† i, outer_measure (Œ± i)}

/-- An upper bound for the measure in a product space.
  It is defined to be the product of the measures of all its projections.
  For boxes it should be equal to the correct measure. -/
def pi_premeasure (m : Œ† i, outer_measure (Œ± i)) (s : set (Œ† i, Œ± i)) : ennreal :=
‚àè i, m i (eval i '' s)

@[simp] lemma pi_premeasure_def {s : set (Œ† i, Œ± i)} :
  pi_premeasure m s = ‚àè i, m i (eval i '' s) := rfl

lemma pi_premeasure_pi {s : Œ† i, set (Œ± i)} (hs : (pi univ s).nonempty) :
  pi_premeasure m (pi univ s) = ‚àè i, m i (s i) :=
by simp [hs]

lemma pi_premeasure_pi' [nonempty Œπ] {s : Œ† i, set (Œ± i)} :
  pi_premeasure m (pi univ s) = ‚àè i, m i (s i) :=
begin
  cases (pi univ s).eq_empty_or_nonempty with h h,
  { rcases univ_pi_eq_empty_iff.mp h with ‚ü®i, hi‚ü©,
    have : ‚àÉ i, m i (s i) = 0 := ‚ü®i, by simp [hi]‚ü©,
    simpa [h, finset.card_univ, zero_pow (fintype.card_pos_iff.mpr _inst_2),
      @eq_comm _ (0 : ennreal), finset.prod_eq_zero_iff] },
  { simp [h] }
end

lemma pi_premeasure_pi_mono {s t : set (Œ† i, Œ± i)} (h : s ‚äÜ t) :
  pi_premeasure m s ‚â§ pi_premeasure m t :=
finset.prod_le_prod' (Œª i _, (m i).mono' (image_subset _ h))

lemma pi_premeasure_pi_eval [nonempty Œπ] {s : set (Œ† i, Œ± i)} :
  pi_premeasure m (pi univ (Œª i, eval i '' s)) = pi_premeasure m s :=
by simp [pi_premeasure_pi']

namespace outer_measure
/-- `outer_measure.pi m` is the finite product of the outer measures `{m i | i : Œπ}`.
  It is defined to be the maximal outer measure `n` with the property that
  `n (pi univ s) ‚â§ ‚àè i, m i (s i)`, where `pi univ s` is the product of the sets
  `{ s i | i : Œπ }`. -/
protected def pi (m : Œ† i, outer_measure (Œ± i)) : outer_measure (Œ† i, Œ± i) :=
bounded_by (pi_premeasure m)

lemma pi_pi_le (s : Œ† i, set (Œ± i)) :
  outer_measure.pi m (pi univ s) ‚â§ ‚àè i, m i (s i) :=
by { cases (pi univ s).eq_empty_or_nonempty with h h, simp [h],
     exact (bounded_by_le _).trans_eq (pi_premeasure_pi h) }


lemma le_pi {m : Œ† i, outer_measure (Œ± i)} {n : outer_measure (Œ† i, Œ± i)} :
  n ‚â§ outer_measure.pi m ‚Üî ‚àÄ (s : Œ† i, set (Œ± i)), (pi univ s).nonempty ‚Üí
    n (pi univ s) ‚â§ ‚àè i, m i (s i) :=
begin
  rw [outer_measure.pi, le_bounded_by'], split,
  { intros h s hs, refine (h _ hs).trans_eq (pi_premeasure_pi hs)  },
  { intros h s hs, refine le_trans (n.mono $ subset_pi_eval_image univ s) (h _ _),
    simp [univ_pi_nonempty_iff, hs] }
end

-- lemma pi_pi_false [encodable Œπ] (s : Œ† i, set (Œ± i))
--   (h2s : (pi univ s).nonempty) : outer_measure.pi m (pi univ s) = ‚àè i, m i (s i) :=
-- begin
--   simp_rw [‚Üê pi_premeasure_pi h2s],
--   refine le_antisymm (bounded_by_le _) _,
--   refine le_binfi _, dsimp only, intros t ht,
--   sorry
--   -- refine le_trans _ (ennreal.tsum_le_tsum $ Œª i, _),
-- end
end outer_measure

namespace measure

variables [Œ† i, measurable_space (Œ± i)] (Œº : Œ† i, measure (Œ± i))

protected lemma caratheodory {Œ±} [measurable_space Œ±] (Œº : measure Œ±) {s t : set Œ±}
  (hs : is_measurable s) : Œº (t ‚à© s) + Œº (t \ s) = Œº t :=
(le_to_outer_measure_caratheodory Œº s hs t).symm

lemma pi_caratheodory :
  measurable_space.pi ‚â§ (outer_measure.pi (Œª i, (Œº i).to_outer_measure)).caratheodory :=
begin
  refine supr_le _, intros i s hs,
  rw [measurable_space.comap] at hs, rcases hs with ‚ü®s, hs, rfl‚ü©,
  apply bounded_by_caratheodory, intro t,
  simp_rw [pi_premeasure_def],
  refine finset.prod_univ_add_prod_univ_le' i _ _ _,
  { simp [image_inter_preimage, image_diff_preimage, (Œº i).caratheodory hs, le_refl] },
  { intros j hj, apply mono', apply image_subset, apply inter_subset_left },
  { intros j hj, apply mono', apply image_subset, apply diff_subset }
end

/-- `measure.pi Œº` is the finite product of the measures `{Œº i | i : Œπ}`.
  It is defined to be the maximal product measure, i.e.
  the maximal measure `n` with the property that `ŒΩ (pi univ s) = ‚àè i, Œº i (s i)`,
  where `pi univ s` is the product of the sets `{ s i | i : Œπ }`. -/
protected def pi : measure (Œ† i, Œ± i) :=
to_measure (outer_measure.pi (Œª i, (Œº i).to_outer_measure)) (pi_caratheodory Œº)

-- lemma pi_pi [encodable Œπ] (s : Œ† i, set (Œ± i)) (h1s : ‚àÄ i, is_measurable (s i))
--   (h2s : (pi univ s).nonempty) : measure.pi Œº (pi univ s) = ‚àè i, Œº i (s i) :=
-- begin
--   rw [measure.pi, to_measure_apply _ _ (is_measurable.pi h1s)],
--   simp_rw [‚Üê to_outer_measure_apply, ‚Üê pi_premeasure_pi h2s],
--   refine le_antisymm (bounded_by_le _) _,
--   refine le_binfi _, dsimp only, intros t ht,
--   sorry
-- end

end measure

end measure_pi

lemma indicator_comp_right {Œ± Œ≤ Œ≥} [has_zero Œ≥] {s : set Œ≤} (f : Œ± ‚Üí Œ≤) {g : Œ≤ ‚Üí Œ≥} {x : Œ±} :
  indicator (f ‚Åª¬π' s) (g ‚àò f) x = indicator s g (f x) :=
by { simp only [indicator], split_ifs; refl }

lemma measure_if {Œ± Œ≤} [measurable_space Œ±] {x : Œ≤} {t : set Œ≤} {s : set Œ±} {Œº : measure Œ±} :
  Œº (if x ‚àà t then s else ‚àÖ) = indicator t (Œª _, Œº s) x :=
begin
  split_ifs; simp [h],
end

variables {Œ± Œ≤ E : Type*} [measurable_space Œ±] [measurable_space Œ≤] {Œº : measure Œ±}


namespace simple_func

section
variables [normed_group E] [normed_space ‚Ñù E]

lemma integral_eq_sum_of_subset {f : simple_func Œ± E} {Œº : measure Œ±} {s : finset E}
  (hs : f.range.filter (Œª x, x ‚â† 0) ‚äÜ s) : f.integral Œº = ‚àë x in s, (Œº (f ‚Åª¬π' {x})).to_real ‚Ä¢ x :=
begin
  rw [simple_func.integral_eq_sum_filter, finset.sum_subset hs],
  rintro x - hx, rw [finset.mem_filter, not_and_distrib, ne.def, not_not] at hx,
  rcases hx with hx|rfl; [skip, simp],
  rw [simple_func.mem_range] at hx, rw [preimage_eq_empty]; simp [disjoint_singleton_left, hx]
end

variables [normed_group Œ±] [opens_measurable_space Œ±] {Œ≥ : Type*} [measurable_space Œ≥]
open simple_func

lemma norm_approx_on_zero_le {f : Œ≤ ‚Üí Œ±} (hf : measurable f) {s : set Œ±} (h‚ÇÄ : (0 : Œ±) ‚àà s)
  [separable_space s] (x : Œ≤) (n : ‚Ñï) :
  ‚à• approx_on f hf s 0 h‚ÇÄ n x ‚à• ‚â§ ‚à• f x ‚à• + ‚à• f x ‚à• :=
begin
  have := edist_approx_on_y0_le hf h‚ÇÄ x n,
  simp [edist_comm (0 : Œ±), edist_eq_coe_nnnorm] at this,
  exact_mod_cast this,
end
end



end simple_func

section integrals

lemma lintegral_mul_const (r : ennreal) {f : Œ± ‚Üí ennreal} (hf : measurable f) :
  ‚à´‚Åª a, f a * r ‚àÇŒº = ‚à´‚Åª a, f a ‚àÇŒº * r :=
by simp_rw [mul_comm, lintegral_const_mul r hf]

lemma lintegral_mul_const_le (r : ennreal) (f : Œ± ‚Üí ennreal) :
  ‚à´‚Åª a, f a ‚àÇŒº * r ‚â§ ‚à´‚Åª a, f a * r ‚àÇŒº :=
by simp_rw [mul_comm, lintegral_const_mul_le r f]

lemma lintegral_mul_const' (r : ennreal) (f : Œ± ‚Üí ennreal) (hr : r ‚â† ‚ä§):
  ‚à´‚Åª a, f a * r ‚àÇŒº = ‚à´‚Åª a, f a ‚àÇŒº * r :=
by simp_rw [mul_comm, lintegral_const_mul' r f hr]

lemma integral_to_real {f : Œ± ‚Üí ennreal} (hfm : measurable f) (hf : ‚àÄ·µê x ‚àÇŒº, f x < ‚ä§) :
  ‚à´ a, (f a).to_real ‚àÇŒº = (‚à´‚Åª a, f a ‚àÇŒº).to_real :=
begin
  rw [integral_eq_lintegral_of_nonneg_ae _ hfm.to_real],
  { rw lintegral_congr_ae, refine hf.mp (eventually_of_forall _),
    intros x hx, rw [lt_top_iff_ne_top] at hx, simp [hx] },
  { exact (eventually_of_forall $ Œª x, ennreal.to_real_nonneg) }
end

lemma lintegral_coe_eq_integral (f : Œ± ‚Üí nnreal) (hfi : integrable (Œª x, (f x : real)) Œº) :
  ‚à´‚Åª a, f a ‚àÇŒº = ennreal.of_real ‚à´ a, f a ‚àÇŒº :=
begin
  rw [integral_eq_lintegral_of_nonneg_ae (eventually_of_forall (Œª x, (f x).coe_nonneg))
    hfi.measurable],
  simp_rw [‚Üê ennreal.coe_nnreal_eq], rw [ennreal.of_real_to_real],
  rw [‚Üê lt_top_iff_ne_top], convert hfi.has_finite_integral, ext1 x,
  rw [nnnorm_coe_eq_self]
end


namespace l1

variables [normed_group Œ≤] [second_countable_topology Œ≤] [borel_space Œ≤]

lemma norm_eq_lintegral {f : Œ± ‚Üí‚ÇÅ[Œº] Œ≤} : ‚à• f ‚à• = (‚à´‚Åª x, (nnnorm (f x) : ennreal) ‚àÇŒº).to_real :=
by simp [l1.norm_eq, ae_eq_fun.edist_zero_eq_coe, ‚Üê edist_eq_coe_nnnorm]

lemma norm_sub_eq_lintegral {f g : Œ± ‚Üí‚ÇÅ[Œº] Œ≤} :
  ‚à• f - g ‚à• = (‚à´‚Åª x, (nnnorm (f x - g x) : ennreal) ‚àÇŒº).to_real :=
begin
  simp_rw [l1.norm_eq, ae_eq_fun.edist_zero_eq_coe, ‚Üê edist_eq_coe_nnnorm],
  rw lintegral_congr_ae,
  refine (ae_eq_fun.coe_fn_sub (f : Œ± ‚Üí‚Çò[Œº] Œ≤) g).mp _,
  apply eventually_of_forall, intros x hx, simp [hx]
end

lemma of_real_norm_eq_lintegral {f : Œ± ‚Üí‚ÇÅ[Œº] Œ≤} :
  ennreal.of_real ‚à• f ‚à• = ‚à´‚Åª x, (nnnorm (f x) : ennreal) ‚àÇŒº :=
by { rw [norm_eq_lintegral, ennreal.of_real_to_real], rw [‚Üê ennreal.lt_top_iff_ne_top],
  exact f.has_finite_integral }

lemma of_real_norm_sub_eq_lintegral {f g : Œ± ‚Üí‚ÇÅ[Œº] Œ≤} :
  ennreal.of_real ‚à• f - g ‚à• = ‚à´‚Åª x, (nnnorm (f x - g x) : ennreal) ‚àÇŒº :=
begin
  simp_rw [of_real_norm_eq_lintegral, ‚Üê edist_eq_coe_nnnorm],
  apply lintegral_congr_ae,
  refine (ae_eq_fun.coe_fn_sub (f : Œ± ‚Üí‚Çò[Œº] Œ≤) g).mp _,
  apply eventually_of_forall, intros x hx, simp only [l1.coe_coe, pi.sub_apply] at hx,
  simp_rw [‚Üê hx, ‚Üê l1.coe_sub, l1.coe_coe]
end

end l1

variables [measurable_space E] [normed_group E] [second_countable_topology E] [normed_space ‚Ñù E]
  [complete_space E] [borel_space E] {f g : Œ± ‚Üí E}

lemma integral_add' (hf : integrable f Œº) (hg : integrable g Œº) :
  ‚à´ a, (f + g) a ‚àÇŒº = ‚à´ a, f a ‚àÇŒº + ‚à´ a, g a ‚àÇŒº :=
integral_add hf hg

lemma integral_zero' : integral Œº (0 : Œ± ‚Üí E) = 0 :=
integral_zero Œ± E

lemma integral_sub' (hf : integrable f Œº) (hg : integrable g Œº) :
  ‚à´ a, (f - g) a ‚àÇŒº = ‚à´ a, f a ‚àÇŒº - ‚à´ a, g a ‚àÇŒº :=
integral_sub hf hg

-- todo: this can probably be generalized to `f` without the assumption `hf`.
lemma integral_smul_const {f : Œ± ‚Üí ‚Ñù} (hf : integrable f Œº) (c : E) :
  ‚à´ x, f x ‚Ä¢ c ‚àÇŒº = (‚à´ x, f x ‚àÇŒº) ‚Ä¢ c :=
((continuous_linear_map.id ‚Ñù ‚Ñù).smul_right c).integral_comp_comm hf

lemma integrable_smul_const {f : Œ± ‚Üí ‚Ñù} {c : E} (hc : c ‚â† 0) :
  integrable (Œª x, f x ‚Ä¢ c) Œº ‚Üî integrable f Œº :=
begin
  simp_rw [integrable, measurable_smul_const hc, and.congr_right_iff, has_finite_integral,
    nnnorm_smul, ennreal.coe_mul],
  intro hf, rw [lintegral_mul_const' _ _ ennreal.coe_ne_top, ennreal.mul_lt_top_iff],
  have : ‚àÄ x : ennreal, x = 0 ‚Üí x < ‚ä§ := by simp,
  simp [hc, or_iff_left_of_imp (this _)]
end

lemma integral_smul_const' (f : Œ± ‚Üí ‚Ñù) (c : E) :
  ‚à´ x, f x ‚Ä¢ c ‚àÇŒº = (‚à´ x, f x ‚àÇŒº) ‚Ä¢ c :=
begin
  by_cases hf : integrable f Œº,
  { exact ((continuous_linear_map.id ‚Ñù ‚Ñù).smul_right c).integral_comp_comm hf },
  { by_cases hc : c = 0,
    { simp only [hc, integral_zero, smul_zero] },
    rw [integral_undef hf, integral_undef, zero_smul],
    rwa [integrable_smul_const hc] }
end


/- fix: replace all notation with

notation `‚à´` binders `, ` r:(scoped:0 f, f) ` ‚àÇ` Œº:70 := integral Œº r

The following code snippet should succeed:
```
import measure_theory.bochner_integration

open measure_theory

example {Œ±} [measurable_space Œ±] {f : Œ± ‚Üí ‚Ñù} {Œº : measure Œ±} :
  ‚à´ x, abs ‚à• f x ‚à• ‚àÇŒº = ‚à´ x, abs ‚à• f x ‚à• ‚àÇŒº :=
rfl
```

-/

lemma ennnorm_integral_le_lintegral_norm (f : Œ± ‚Üí E) :
  (nnnorm (‚à´ a, f a ‚àÇŒº) : ennreal) ‚â§ ‚à´‚Åª a, (ennreal.of_real ‚à•f a‚à•) ‚àÇŒº :=
by { rw [‚Üê of_real_norm_eq_coe_nnnorm], apply ennreal.of_real_le_of_le_to_real,
  exact norm_integral_le_lintegral_norm f }

end integrals

/-! ### Prod -/


/-- x -/
def is_pi_system {Œ±} (C : set (set Œ±)) : Prop :=
‚àÄ s t ‚àà C, (s ‚à© t : set Œ±).nonempty ‚Üí s ‚à© t ‚àà C

lemma generate_from_prod : generate_from
    (image2 set.prod { s | is_measurable s } { t | is_measurable t } : set (set (Œ± √ó Œ≤))) =
  prod.measurable_space :=
begin
  apply le_antisymm,
  { apply generate_from_le, rintro _ ‚ü®s, t, hs, ht, rfl‚ü©, rw [prod_eq],
    exact (measurable_fst hs).inter (measurable_snd ht) },
  { refine sup_le _ _; rintro _ ‚ü®s, hs, rfl‚ü©; apply is_measurable_generate_from,
    exact ‚ü®s, univ, hs, is_measurable.univ, prod_univ‚ü©,
    exact ‚ü®univ, s, is_measurable.univ, hs, univ_prod‚ü© }
end

lemma is_pi_system_prod :
  is_pi_system (image2 set.prod { s : set Œ± | is_measurable s } { t : set Œ≤ | is_measurable t }) :=
by { rintro _ _ ‚ü®s‚ÇÅ, t‚ÇÅ, hs‚ÇÅ, ht‚ÇÅ, rfl‚ü© ‚ü®s‚ÇÇ, t‚ÇÇ, hs‚ÇÇ, ht‚ÇÇ, rfl‚ü© _, rw [prod_inter_prod],
     exact mem_image2_of_mem (hs‚ÇÅ.inter hs‚ÇÇ) (ht‚ÇÅ.inter ht‚ÇÇ) }

lemma lintegral_comp {Œº : measure Œ±} {f : Œ≤ ‚Üí ennreal} {g : Œ± ‚Üí Œ≤} (hf : measurable f) (hg : measurable g) :
  lintegral Œº (f ‚àò g) = ‚à´‚Åª a, f a ‚àÇ(map g Œº) :=
(lintegral_map hf hg).symm

-- def sigma_finite_mk {Œº : measure Œ±} {s : set Œ±} (sets : ‚Ñï ‚Üí set Œ±)
--   (h1 : ‚àÄ i, is_measurable (sets i)) (h2 : ‚àÄ i, Œº (sets i) < ‚ä§) (h3 : (‚ãÉ i, sets i) = s) :
--   sigma_finite Œº s :=
-- { spanning_sets := accumulate sets,
--   monotone_spanning_sets := monotone_accumulate,
--   is_measurable_spanning_sets :=
--     Œª i, is_measurable.Union $ Œª j, is_measurable.Union_Prop $ Œª hij, h1 j,
--   measure_spanning_sets_lt_top :=
--     by { intro i, rw [accumulate_nat],
--       apply (measure_bUnion_le _ _).trans_lt,
--       refine (finset.tsum_subtype _ (Œª i, Œº (sets i))).le.trans_lt _,
--       rw ennreal.sum_lt_top_iff, exact Œª j _, h2 j,
--       exact (finset.range (i+1)).countable_to_set },
--   Union_spanning_sets := by { rw [Union_accumulate, h3] } }

/-- A measure `Œº` is called œÉ-finite if there is a countable collection of sets
  `{ A i | i ‚àà ‚Ñï }` such that `Œº (A i) < ‚ä§` and `‚ãÉ i, A i = s`. -/
class sigma_finite (Œº : measure Œ±) : Prop :=
(exists_finite_spanning_sets :
  ‚àÉ s : ‚Ñï ‚Üí set Œ±,
  (‚àÄ i, is_measurable (s i)) ‚àß
  (‚àÄ i, Œº (s i) < ‚ä§) ‚àß
  (‚ãÉ i, s i) = univ)

lemma exists_finite_spanning_sets (Œº : measure Œ±) [sigma_finite Œº] :
  ‚àÉ s : ‚Ñï ‚Üí set Œ±,
  (‚àÄ i, is_measurable (s i)) ‚àß
  (‚àÄ i, Œº (s i) < ‚ä§) ‚àß
  (‚ãÉ i, s i) = univ :=
sigma_finite.exists_finite_spanning_sets

/-- A noncomputable way to get a monotone collection of sets that span `univ` and have finite
  measure using `classical.some`. This definition satisfies monotonicity in addition to all other
  properties in `sigma_finite`. -/
def spanning_sets (Œº : measure Œ±) [sigma_finite Œº] (i : ‚Ñï) : set Œ± :=
accumulate (classical.some (exists_finite_spanning_sets Œº)) i

lemma monotone_spanning_sets (Œº : measure Œ±) [sigma_finite Œº] :
  monotone (spanning_sets Œº) :=
monotone_accumulate

lemma is_measurable_spanning_sets (Œº : measure Œ±) [sigma_finite Œº] (i : ‚Ñï) :
  is_measurable (spanning_sets Œº i) :=
is_measurable.Union $ Œª j, is_measurable.Union_Prop $
  Œª hij, (classical.some_spec (exists_finite_spanning_sets Œº)).1 j

lemma measure_spanning_sets_lt_top (Œº : measure Œ±) [sigma_finite Œº] (i : ‚Ñï) :
  Œº (spanning_sets Œº i) < ‚ä§ :=
begin
  rw [spanning_sets, accumulate_nat],
  apply (measure_bUnion_le _ _).trans_lt,
  refine (finset.tsum_subtype _ (Œª i, Œº _)).le.trans_lt _,
  rw ennreal.sum_lt_top_iff,
  exact Œª j _, (classical.some_spec (exists_finite_spanning_sets Œº)).2.1 j,
  exact (finset.range (i+1)).countable_to_set
end

lemma Union_spanning_sets (Œº : measure Œ±) [sigma_finite Œº] :
  (‚ãÉ i : ‚Ñï, spanning_sets Œº i) = univ :=
by simp_rw [spanning_sets, Union_accumulate,
  (classical.some_spec (exists_finite_spanning_sets Œº)).2.2]

namespace measure
lemma supr_restrict_spanning_sets {Œº : measure Œ±} [sigma_finite Œº] {s : set Œ±}
  (hs : is_measurable s) :
  (‚®Ü i, Œº.restrict (spanning_sets Œº i) s) = Œº s :=
begin
  convert (restrict_Union_apply_eq_supr (is_measurable_spanning_sets Œº) _ hs).symm,
  { simp [Union_spanning_sets] },
  { exact directed_of_sup (monotone_spanning_sets Œº) }
end

end measure
end measure_theory
open measure_theory








variables {Œ± Œ≤ : Type*} [measurable_space Œ±] [measurable_space Œ≤]
  {Œº : measure_theory.measure Œ±} {ŒΩ : measure_theory.measure Œ≤}
open measure_theory.measure





lemma is_measurable.measure_prod_mk_left_finite [finite_measure ŒΩ] {s : set (Œ± √ó Œ≤)}
  (hs : is_measurable s) : measurable (Œª x, ŒΩ (prod.mk x ‚Åª¬π' s)) :=
begin
  refine induction_on_inter generate_from_prod.symm is_pi_system_prod _ _ _ _ hs,
  { simp [measurable_zero, pi.const_def] },
  { rintro _ ‚ü®s, t, hs, ht, rfl‚ü©, simp only [mk_preimage_prod_right_eq_if, measure_if],
    exact measurable_const.indicator hs },
  { intros t ht h2t,
    simp_rw [preimage_compl, measure_compl (measurable_prod_mk_left ht) (measure_lt_top ŒΩ _)],
    exact measurable_const.ennreal_sub h2t },
  { intros f h1f h2f h3f, simp_rw [preimage_Union],
    have : ‚àÄ b, ŒΩ (‚ãÉ i, prod.mk b ‚Åª¬π' f i) = ‚àë' i, ŒΩ (prod.mk b ‚Åª¬π' f i) :=
      Œª b, measure_Union (Œª i j hij, disjoint.preimage _ (h1f i j hij))
        (Œª i, measurable_prod_mk_left (h2f i)),
    simp_rw [this], apply measurable.ennreal_tsum h3f },
end

lemma is_measurable.measure_prod_mk_left [sigma_finite ŒΩ] {s : set (Œ± √ó Œ≤)}
  (hs : is_measurable s) : measurable (Œª x, ŒΩ (prod.mk x ‚Åª¬π' s)) :=
begin
  have : ‚àÄ x, is_measurable (prod.mk x ‚Åª¬π' s) := Œª x, measurable_prod_mk_left hs,
  simp only [‚Üê supr_restrict_spanning_sets, this],
  apply measurable_supr, intro i,
  haveI : fact _ := measure_spanning_sets_lt_top ŒΩ i,
  exact hs.measure_prod_mk_left_finite
end

lemma measurable.map_prod_mk_left [sigma_finite ŒΩ] : measurable (Œª x : Œ±, map (prod.mk x) ŒΩ) :=
begin
  apply measurable_of_measurable_coe, intros s hs,
  simp_rw [map_apply measurable_prod_mk_left hs],
  exact hs.measure_prod_mk_left
end

lemma is_measurable.measure_prod_mk_right_finite {Œº : measure Œ±} [finite_measure Œº] {s : set (Œ± √ó Œ≤)}
  (hs : is_measurable s) : measurable (Œª y, Œº ((Œª x, (x, y)) ‚Åª¬π' s)) :=
by { convert (is_measurable_swap_iff.mpr hs).measure_prod_mk_left_finite, apply_instance }

lemma is_measurable.measure_prod_mk_right {Œº : measure Œ±} [sigma_finite Œº] {s : set (Œ± √ó Œ≤)}
  (hs : is_measurable s) : measurable (Œª y, Œº ((Œª x, (x, y)) ‚Åª¬π' s)) :=
by { convert (is_measurable_swap_iff.mpr hs).measure_prod_mk_left, apply_instance }

/- Is there a way to do this without duplicating? -/
lemma measurable.map_prod_mk_right {Œº : measure Œ±} [sigma_finite Œº] :
  measurable (Œª y : Œ≤, map (Œª x : Œ±, (x, y)) Œº) :=
begin
  apply measurable_of_measurable_coe, intros s hs,
  simp_rw [map_apply measurable_prod_mk_right hs],
  exact hs.measure_prod_mk_right
end

namespace measure_theory




namespace measure

/-- The product of two measures. -/
protected def prod (Œº : measure Œ±) (ŒΩ : measure Œ≤) : measure (Œ± √ó Œ≤) :=
bind Œº $ Œª x : Œ±, map (prod.mk x) ŒΩ

variables {Œº ŒΩ}

/- todo: rename set.disjoint.preimage -> disjoint.preimage -/


lemma prod_apply [sigma_finite ŒΩ] {s : set (Œ± √ó Œ≤)} (hs : is_measurable s) :
  Œº.prod ŒΩ s = ‚à´‚Åª x, ŒΩ (prod.mk x ‚Åª¬π' s) ‚àÇŒº :=
begin
  rw [measure.prod, bind_apply hs],
  congr, ext x : 1, rw [map_apply _ hs],
  apply measurable_prod_mk_left,
  exact measurable.map_prod_mk_left
end

@[simp] lemma prod_prod [sigma_finite ŒΩ] {s : set Œ±} {t : set Œ≤}
  (hs : is_measurable s) (ht : is_measurable t) : Œº.prod ŒΩ (s.prod t) = Œº s * ŒΩ t :=
by simp_rw [prod_apply (hs.prod ht), mk_preimage_prod_right_eq_if, measure_if,
  lintegral_indicator _ hs, lintegral_const, restrict_apply is_measurable.univ,
  univ_inter, mul_comm]

lemma ae_measure_lt_top [sigma_finite ŒΩ] {s : set (Œ± √ó Œ≤)} (hs : is_measurable s)
  (h2s : (Œº.prod ŒΩ) s < ‚ä§) : ‚àÄ·µê x ‚àÇŒº, ŒΩ (prod.mk x ‚Åª¬π' s) < ‚ä§ :=
by { simp_rw [prod_apply hs] at h2s, refine ae_lt_top hs.measure_prod_mk_left h2s }

lemma integrable_measure_prod_mk_left [sigma_finite ŒΩ] {s : set (Œ± √ó Œ≤)}
  (hs : is_measurable s) (h2s : (Œº.prod ŒΩ) s < ‚ä§) : integrable (Œª x, (ŒΩ (prod.mk x ‚Åª¬π' s)).to_real) Œº :=
begin
  refine ‚ü®hs.measure_prod_mk_left.to_real, _‚ü©,
  simp_rw [has_finite_integral, ennnorm_eq_of_real ennreal.to_real_nonneg],
  convert h2s using 1, simp_rw [prod_apply hs], apply lintegral_congr_ae,
  refine (ae_measure_lt_top hs h2s).mp _, apply eventually_of_forall, intros x hx,
  rw [lt_top_iff_ne_top] at hx, simp [ennreal.of_real_to_real, hx],
end

section both_sigma_finite

variables [sigma_finite Œº] [sigma_finite ŒΩ]

lemma prod_unique {ŒºŒΩ‚ÇÅ ŒºŒΩ‚ÇÇ : measure (Œ± √ó Œ≤)}
  (h‚ÇÅ : ‚àÄ s t, is_measurable s ‚Üí is_measurable t ‚Üí ŒºŒΩ‚ÇÅ (s.prod t) = Œº s * ŒΩ t)
  (h‚ÇÇ : ‚àÄ s t, is_measurable s ‚Üí is_measurable t ‚Üí ŒºŒΩ‚ÇÇ (s.prod t) = Œº s * ŒΩ t) : ŒºŒΩ‚ÇÅ = ŒºŒΩ‚ÇÇ :=
begin
  refine ext_of_generate_from_of_Union _
    (Œª i, (spanning_sets Œº i).prod (spanning_sets ŒΩ i))
    generate_from_prod.symm is_pi_system_prod _ _ _ _,
  { rw [Union_prod_of_monotone (monotone_spanning_sets Œº) (monotone_spanning_sets ŒΩ)],
    simp_rw [Union_spanning_sets, univ_prod_univ] },
  { intro i, apply mem_image2_of_mem; apply is_measurable_spanning_sets },
  { intro i, rw [h‚ÇÅ], apply ennreal.mul_lt_top; apply measure_spanning_sets_lt_top,
    all_goals { apply is_measurable_spanning_sets } },
  { rintro _ ‚ü®s, t, hs, ht, rfl‚ü©, simp * at * }
end

lemma prod_swap : map prod.swap (Œº.prod ŒΩ) = ŒΩ.prod Œº :=
begin
  refine prod_unique _ (Œª _ _, prod_prod),
  intros s t hs ht,
  simp_rw [map_apply measurable_swap (hs.prod ht), preimage_swap_prod, prod_prod ht hs, mul_comm]
end

lemma prod_apply_symm {s : set (Œ± √ó Œ≤)} (hs : is_measurable s) :
  Œº.prod ŒΩ s = ‚à´‚Åª y, Œº ((Œª x, (x, y)) ‚Åª¬π' s) ‚àÇŒΩ :=
by { rw [‚Üê prod_swap, map_apply measurable_swap hs],
     simp only [prod_apply (measurable_swap hs)], refl }

instance prod.sigma_finite : sigma_finite (Œº.prod ŒΩ) :=
‚ü®‚ü®Œª n, (spanning_sets Œº n).prod (spanning_sets ŒΩ n),
  Œª n, (is_measurable_spanning_sets Œº n).prod (is_measurable_spanning_sets ŒΩ n),
  Œª n, by { simp_rw [prod_prod (is_measurable_spanning_sets Œº n) (is_measurable_spanning_sets ŒΩ n)],
    apply ennreal.mul_lt_top (measure_spanning_sets_lt_top Œº n) (measure_spanning_sets_lt_top ŒΩ n) },
  by { simp_rw [Union_prod_of_monotone (monotone_spanning_sets Œº) (monotone_spanning_sets ŒΩ),
    Union_spanning_sets, univ_prod_univ] }‚ü©‚ü©

end both_sigma_finite

end measure

end measure_theory
open measure_theory measure_theory.measure

/-- The Lebesgue intergral is measurable. This shows that the integrand of (the right-hand-side of)
  Tonelli's theorem is measurable. -/
lemma measurable.lintegral_prod_right' [sigma_finite ŒΩ] :
  ‚àÄ {f : Œ± √ó Œ≤ ‚Üí ennreal} (hf : measurable f), measurable (Œª x, ‚à´‚Åª y, f (x, y) ‚àÇŒΩ) :=
begin
  have m := @measurable_prod_mk_left,
  refine measurable.ennreal_induction _ _ _,
  { intros c s hs, simp only [‚Üê indicator_comp_right],
    suffices : measurable (Œª x, c * ŒΩ (prod.mk x ‚Åª¬π' s)),
    { simpa [lintegral_indicator _ (m hs)] },
    exact measurable_const.ennreal_mul hs.measure_prod_mk_left },
  { rintro f g - hf hg h2f h2g, simp [lintegral_add (hf.comp m) (hg.comp m)], exact h2f.add h2g },
  { intros f hf h2f h3f,
    have := measurable_supr h3f,
    have : ‚àÄ x, monotone (Œª n y, f n (x, y)) := Œª x i j hij y, h2f hij (x, y),
    simpa [lintegral_supr (Œª n, (hf n).comp m), this] }
end

lemma measurable.lintegral_prod_right [sigma_finite ŒΩ] {f : Œ± ‚Üí Œ≤ ‚Üí ennreal}
  (hf : measurable (uncurry f)) : measurable (Œª x, ‚à´‚Åª y, f x y ‚àÇŒΩ) :=
hf.lintegral_prod_right'

/-- The Lebesgue intergral is measurable This shows that the integrand of (the right-hand-side of)
  the symmetric version of Tonelli's theorem is measurable. -/
lemma measurable.lintegral_prod_left' [sigma_finite Œº] {f : Œ± √ó Œ≤ ‚Üí ennreal}
  (hf : measurable f) : measurable (Œª y, ‚à´‚Åª x, f (x, y) ‚àÇŒº) :=
(measurable_swap_iff.mpr hf).lintegral_prod_right'

lemma measurable.lintegral_prod_left [sigma_finite Œº] {f : Œ± ‚Üí Œ≤ ‚Üí ennreal}
  (hf : measurable (uncurry f)) : measurable (Œª y, ‚à´‚Åª x, f x y ‚àÇŒº) :=
hf.lintegral_prod_left'

namespace measure_theory

lemma lintegral_prod_swap [sigma_finite Œº] [sigma_finite ŒΩ] (f : Œ± √ó Œ≤ ‚Üí ennreal)
  (hf : measurable f) : ‚à´‚Åª z, f z.swap ‚àÇ(ŒΩ.prod Œº) = ‚à´‚Åª z, f z ‚àÇ(Œº.prod ŒΩ) :=
by rw [‚Üê lintegral_map hf measurable_swap, prod_swap]

/-- Tonelli's Theorem: For `ennreal`-valued measurable functions on `Œ± √ó Œ≤`,
  the integral of `f` is equal to the iterated integral. -/
lemma lintegral_prod [sigma_finite ŒΩ] :
  ‚àÄ (f : Œ± √ó Œ≤ ‚Üí ennreal) (hf : measurable f), ‚à´‚Åª z, f z ‚àÇ(Œº.prod ŒΩ) = ‚à´‚Åª x, ‚à´‚Åª y, f (x, y) ‚àÇŒΩ ‚àÇŒº :=
begin
  have m := @measurable_prod_mk_left,
  refine measurable.ennreal_induction _ _ _,
  { intros c s hs, simp only [‚Üê indicator_comp_right],
    simp [lintegral_indicator, m hs, hs, lintegral_const_mul, hs.measure_prod_mk_left,
      prod_apply] },
  { rintro f g - hf hg h2f h2g,
    simp [lintegral_add, hf.comp m, hg.comp m, h2f, h2g, measurable.lintegral_prod_right', hf, hg] },
  { intros f hf h2f h3f,
    have kf : ‚àÄ x n, measurable (Œª y, f n (x, y)) := Œª x n, (hf n).comp m,
    have k2f : ‚àÄ x, monotone (Œª n y, f n (x, y)) := Œª x i j hij y, h2f hij (x, y),
    have lf : ‚àÄ n, measurable (Œª x, ‚à´‚Åª y, f n (x, y) ‚àÇŒΩ) := Œª n, (hf n).lintegral_prod_right',
    have l2f : monotone (Œª n x, ‚à´‚Åª y, f n (x, y) ‚àÇŒΩ) := Œª i j hij x, lintegral_mono (k2f x hij),
    simp only [lintegral_supr hf h2f, lintegral_supr (kf _), k2f, lintegral_supr lf l2f, h3f] },
end

/-- The symmetric verion of Tonelli's Theorem: For `ennreal`-valued measurable functions on `Œ± √ó Œ≤`,
  the integral of `f` is equal to the iterated integral, in reverse order. -/
lemma lintegral_prod_symm [sigma_finite Œº] [sigma_finite ŒΩ] (f : Œ± √ó Œ≤ ‚Üí ennreal)
  (hf : measurable f) : ‚à´‚Åª z, f z ‚àÇ(Œº.prod ŒΩ) = ‚à´‚Åª y, ‚à´‚Åª x, f (x, y) ‚àÇŒº ‚àÇŒΩ :=
by { simp_rw [‚Üê lintegral_prod_swap f hf], exact lintegral_prod _ (hf.comp measurable_swap) }

/-- The reversed version of Tonelli's Theorem. -/
lemma lintegral_lintegral [sigma_finite ŒΩ] ‚¶Éf : Œ± ‚Üí Œ≤ ‚Üí ennreal‚¶Ñ
  (hf : measurable (uncurry f)) :
  ‚à´‚Åª x, ‚à´‚Åª y, f x y ‚àÇŒΩ ‚àÇŒº = ‚à´‚Åª z, f z.1 z.2 ‚àÇ(Œº.prod ŒΩ) :=
(lintegral_prod _ hf).symm

/-- The reversed version of Tonelli's Theorem (symmetric version). -/
lemma lintegral_lintegral_symm [sigma_finite Œº] [sigma_finite ŒΩ] ‚¶Éf : Œ± ‚Üí Œ≤ ‚Üí ennreal‚¶Ñ
  (hf : measurable (uncurry f)) :
  ‚à´‚Åª x, ‚à´‚Åª y, f x y ‚àÇŒΩ ‚àÇŒº = ‚à´‚Åª z, f z.2 z.1 ‚àÇ(ŒΩ.prod Œº) :=
(lintegral_prod_symm _ (hf.comp measurable_swap)).symm

/-- You can change the order of integration. -/
lemma lintegral_lintegral_swap [sigma_finite Œº] [sigma_finite ŒΩ] ‚¶Éf : Œ± ‚Üí Œ≤ ‚Üí ennreal‚¶Ñ
  (hf : measurable (uncurry f)) :
  ‚à´‚Åª x, ‚à´‚Åª y, f x y ‚àÇŒΩ ‚àÇŒº = ‚à´‚Åª y, ‚à´‚Åª x, f x y ‚àÇŒº ‚àÇŒΩ :=
(lintegral_lintegral hf).trans (lintegral_prod_symm _ hf)

end measure_theory
open measure_theory

variables {E : Type*} [normed_group E] [measurable_space E]

namespace measure_theory
variables [opens_measurable_space E]

lemma integrable.swap [sigma_finite Œº] [sigma_finite ŒΩ] ‚¶Éf : Œ± √ó Œ≤ ‚Üí E‚¶Ñ
  (hf : integrable f (Œº.prod ŒΩ)) : integrable (f ‚àò prod.swap) (ŒΩ.prod Œº) :=
begin
  refine ‚ü®hf.measurable.comp measurable_swap, lt_of_le_of_lt (eq.le _) hf.has_finite_integral‚ü©,
  convert lintegral_prod_swap _ hf.measurable.ennnorm; apply_instance
end

lemma integrable_swap_iff [sigma_finite Œº] [sigma_finite ŒΩ] ‚¶Éf : Œ± √ó Œ≤ ‚Üí E‚¶Ñ :
  integrable (f ‚àò prod.swap) (ŒΩ.prod Œº) ‚Üî integrable f (Œº.prod ŒΩ) :=
‚ü®Œª hf, by { convert hf.swap, ext ‚ü®x, y‚ü©, refl }, Œª hf, hf.swap‚ü©

lemma has_finite_integral_prod_iff [sigma_finite ŒΩ] ‚¶Éf : Œ± √ó Œ≤ ‚Üí E‚¶Ñ (h1f : measurable f) :
  (‚àÄ·µê x ‚àÇ Œº, has_finite_integral (Œª y, f (x, y)) ŒΩ) ‚àß
    has_finite_integral (Œª x, ‚à´ y, ‚à• f (x, y) ‚à• ‚àÇŒΩ) Œº ‚Üî has_finite_integral f (Œº.prod ŒΩ) :=
begin
  simp only [has_finite_integral, lintegral_prod _ h1f.ennnorm],
  have : ‚àÄ x, ‚àÄ·µê y ‚àÇŒΩ, 0 ‚â§ ‚à• f (x, y) ‚à• := Œª x, eventually_of_forall (Œª y, norm_nonneg _),
  simp_rw [integral_eq_lintegral_of_nonneg_ae (this _) (h1f.norm.comp measurable_prod_mk_left),
    ennnorm_eq_of_real (ennreal.to_real_nonneg), of_real_norm_eq_coe_nnnorm],
  -- this fact looks to specialized to be its own lemma
  have : ‚àÄ {p q r : Prop} (h1 : r ‚Üí p), (p ‚àß q ‚Üî r) ‚Üî (p ‚Üí (q ‚Üî r)) :=
  Œª p q r h1, by rw [‚Üê and.congr_right_iff, and_iff_right_of_imp h1],
  rw [this],
  { intro h2f, rw lintegral_congr_ae,
    refine h2f.mp _, apply eventually_of_forall, intros x hx, dsimp,
    rw [ennreal.of_real_to_real], rw [‚Üê ennreal.lt_top_iff_ne_top], exact hx },
  { intro h2f, refine ae_lt_top _ h2f, exact h1f.ennnorm.lintegral_prod_right' },
end

end measure_theory
open measure_theory

lemma is_measurable_integrable [opens_measurable_space E] [sigma_finite ŒΩ] ‚¶Éf : Œ± ‚Üí Œ≤ ‚Üí E‚¶Ñ
  (hf : measurable (uncurry f)) : is_measurable { x | integrable (f x) ŒΩ } :=
begin
  simp [integrable, hf.of_uncurry_left],
  refine is_measurable_lt (measurable.lintegral_prod_right _) measurable_const,
  exact hf.ennnorm
end

section
variables [second_countable_topology E] [normed_space ‚Ñù E]
  [complete_space E] [borel_space E]

lemma integral_prod_swap [sigma_finite Œº] [sigma_finite ŒΩ] (f : Œ± √ó Œ≤ ‚Üí E)
  (hf : measurable f) : ‚à´ z, f z.swap ‚àÇ(ŒΩ.prod Œº) = ‚à´ z, f z ‚àÇ(Œº.prod ŒΩ) :=
by rw [‚Üê integral_map_measure measurable_swap hf, prod_swap]

/-- The Bochner intergral is measurable. This shows that the integrand of (the right-hand-side of)
  Fubini's theorem is measurable. -/
lemma measurable.integral_prod_right [sigma_finite ŒΩ] ‚¶Éf : Œ± ‚Üí Œ≤ ‚Üí E‚¶Ñ
  (hf : measurable (uncurry f)) : measurable (Œª x, ‚à´ y, f x y ‚àÇŒΩ) :=
begin
  let s : ‚Ñï ‚Üí simple_func (Œ± √ó Œ≤) E := simple_func.approx_on _ hf univ _ (mem_univ 0),
  let s' : ‚Ñï ‚Üí Œ± ‚Üí simple_func Œ≤ E := Œª n x, (s n).comp (prod.mk x) measurable_prod_mk_left,
  let f' : ‚Ñï ‚Üí Œ± ‚Üí E := Œª n, {x | integrable (f x) ŒΩ}.indicator
    (Œª x, (s' n x).integral ŒΩ),
  have hf' : ‚àÄ n, measurable (f' n),
  { intro n, refine measurable.indicator _ (is_measurable_integrable hf),
    have : ‚àÄ x, (s' n x).range.filter (Œª x, x ‚â† 0) ‚äÜ
      (s n).range,
    { intros x, refine finset.subset.trans (finset.filter_subset _) _, intro y,
      simp_rw [simple_func.mem_range], rintro ‚ü®z, rfl‚ü©, exact ‚ü®(x, z), rfl‚ü© },
    simp only [simple_func.integral_eq_sum_of_subset (this _)],
    refine finset.measurable_sum _ _, intro x,
    refine (measurable.to_real _).smul measurable_const,
    simp only [simple_func.coe_comp, preimage_comp] {single_pass := tt},
    apply is_measurable.measure_prod_mk_left,
    exact (s n).is_measurable_fiber x },
  have h2f' : tendsto f' at_top (ùìù (Œª (x : Œ±), ‚à´ (y : Œ≤), f x y ‚àÇŒΩ)),
  { rw [tendsto_pi], intro x,
    by_cases hfx : integrable (f x) ŒΩ,
    { have : ‚àÄ n, integrable (s' n x) ŒΩ := Œª n, (hfx.norm.add hfx.norm).mono' (s' n x).measurable
        (eventually_of_forall $
          Œª y, by { dsimp [s'], exact simple_func.norm_approx_on_zero_le _ _ (x, y) n }),
      simp only [f', hfx, simple_func.integral_eq_integral _ (this _), indicator_of_mem,
        mem_set_of_eq],
      refine tendsto_integral_of_dominated_convergence (Œª y, ‚à•f x y‚à• + ‚à•f x y‚à•)
        (Œª n, (s' n x).measurable) hf.of_uncurry_left (hfx.norm.add hfx.norm) _ _,
      { exact Œª n, eventually_of_forall (Œª y, simple_func.norm_approx_on_zero_le _ _ (x, y) n) },
      { exact eventually_of_forall (Œª y, simple_func.tendsto_approx_on _ _ (by simp)) } },
    { simpa [f', hfx, integral_undef] using @tendsto_const_nhds _ _ _ (0 : E) _, }
     },
  exact measurable_of_tendsto_metric hf' h2f'
end

lemma measurable.integral_prod_right' [sigma_finite ŒΩ] ‚¶Éf : Œ± √ó Œ≤ ‚Üí E‚¶Ñ
  (hf : measurable f) : measurable (Œª x, ‚à´ y, f (x, y) ‚àÇŒΩ) :=
by { rw [‚Üê uncurry_curry f] at hf, exact hf.integral_prod_right }

end

namespace measure_theory

section
variables [opens_measurable_space E]

lemma integrable_prod_iff [sigma_finite ŒΩ] ‚¶Éf : Œ± √ó Œ≤ ‚Üí E‚¶Ñ (h1f : measurable f) :
  (‚àÄ·µê x ‚àÇ Œº, integrable (Œª y, f (x, y)) ŒΩ) ‚àß integrable (Œª x, ‚à´ y, ‚à• f (x, y) ‚à• ‚àÇŒΩ) Œº ‚Üî
  integrable f (Œº.prod ŒΩ) :=
by simp only [integrable, h1f, h1f.comp measurable_prod_mk_left, h1f.norm.integral_prod_right',
  true_and, has_finite_integral_prod_iff]

lemma integrable_prod_iff' [sigma_finite Œº] [sigma_finite ŒΩ] ‚¶Éf : Œ± √ó Œ≤ ‚Üí E‚¶Ñ (h1f : measurable f) :
  (‚àÄ·µê y ‚àÇ ŒΩ, integrable (Œª x, f (x, y)) Œº) ‚àß integrable (Œª y, ‚à´ x, ‚à• f (x, y) ‚à• ‚àÇŒº) ŒΩ ‚Üî
  integrable f (Œº.prod ŒΩ) :=
by { convert integrable_prod_iff (h1f.comp measurable_swap) using 1, rw [integrable_swap_iff],
  apply_instance }

lemma integrable.prod_left_ae [sigma_finite Œº] [sigma_finite ŒΩ] ‚¶Éf : Œ± √ó Œ≤ ‚Üí E‚¶Ñ
  (hf : integrable f (Œº.prod ŒΩ)) : ‚àÄ·µê y ‚àÇ ŒΩ, integrable (Œª x, f (x, y)) Œº :=
((integrable_prod_iff' hf.measurable).mpr hf).1

lemma integrable.prod_right_ae [sigma_finite Œº] [sigma_finite ŒΩ] ‚¶Éf : Œ± √ó Œ≤ ‚Üí E‚¶Ñ
  (hf : integrable f (Œº.prod ŒΩ)) : ‚àÄ·µê x ‚àÇ Œº, integrable (Œª y, f (x, y)) ŒΩ :=
hf.swap.prod_left_ae

lemma integrable.integral_norm_prod_left [sigma_finite ŒΩ] ‚¶Éf : Œ± √ó Œ≤ ‚Üí E‚¶Ñ
  (hf : integrable f (Œº.prod ŒΩ)) : integrable (Œª x, ‚à´ y, ‚à• f (x, y) ‚à• ‚àÇŒΩ) Œº :=
((integrable_prod_iff hf.measurable).mpr hf).2

lemma integrable.integral_norm_prod_right [sigma_finite Œº] [sigma_finite ŒΩ] ‚¶Éf : Œ± √ó Œ≤ ‚Üí E‚¶Ñ
  (hf : integrable f (Œº.prod ŒΩ)) : integrable (Œª y, ‚à´ x, ‚à• f (x, y) ‚à• ‚àÇŒº) ŒΩ :=
hf.swap.integral_norm_prod_left

end

variables [second_countable_topology E] [normed_space ‚Ñù E]
  [complete_space E] [borel_space E]

lemma integrable.integral_prod_left [sigma_finite ŒΩ] ‚¶Éf : Œ± √ó Œ≤ ‚Üí E‚¶Ñ
  (hf : integrable f (Œº.prod ŒΩ)) : integrable (Œª x, ‚à´ y, f (x, y) ‚àÇŒΩ) Œº :=
integrable.mono hf.integral_norm_prod_left hf.measurable.integral_prod_right' $
  eventually_of_forall $ Œª x, (norm_integral_le_integral_norm _).trans_eq $
  (norm_eq_self $ integral_nonneg_of_ae $ eventually_of_forall $ Œª y, (norm_nonneg _ : _)).symm

lemma integrable.integral_prod_right [sigma_finite Œº] [sigma_finite ŒΩ] ‚¶Éf : Œ± √ó Œ≤ ‚Üí E‚¶Ñ
  (hf : integrable f (Œº.prod ŒΩ)) : integrable (Œª y, ‚à´ x, f (x, y) ‚àÇŒº) ŒΩ :=
hf.swap.integral_prod_left

lemma measure_prod_null_of_is_measurable [sigma_finite ŒΩ] {s : set (Œ± √ó Œ≤)}
  (hs : is_measurable s) : Œº.prod ŒΩ s = 0 ‚Üî (Œª x, ŒΩ (prod.mk x ‚Åª¬π' s)) =·µê[Œº] 0 :=
by simp_rw [prod_apply hs, lintegral_eq_zero_iff hs.measure_prod_mk_left]

-- todo: rename or prove iff
lemma measure_prod_null [sigma_finite ŒΩ] {s : set (Œ± √ó Œ≤)}
  (h : Œº.prod ŒΩ s = 0) : (Œª x, ŒΩ (prod.mk x ‚Åª¬π' s)) =·µê[Œº] 0 :=
begin
  obtain ‚ü®t, hst, mt, ht‚ü© := exists_is_measurable_superset_of_measure_eq_zero h,
  simp_rw [measure_prod_null_of_is_measurable mt] at ht,
  rw [eventually_le_antisymm_iff],
  exact ‚ü®eventually_le.trans_eq
    (eventually_of_forall $ Œª x, (measure_mono (preimage_mono hst) : _)) ht,
    eventually_of_forall $ Œª x, zero_le _‚ü©
end

lemma ae_prod [sigma_finite ŒΩ] {p : Œ± √ó Œ≤ ‚Üí Prop} (h : ‚àÄ·µê z ‚àÇŒº.prod ŒΩ, p z) :
  ‚àÄ·µê x ‚àÇ Œº, ‚àÄ·µê y ‚àÇ ŒΩ, p (x, y) :=
measure_prod_null h

-- lemma measure_prod_null [sigma_finite Œº] [sigma_finite ŒΩ] {s : set (Œ± √ó Œ≤)} :
--   Œº.prod ŒΩ s = 0 ‚Üî (Œª x, ŒΩ (prod.mk x ‚Åª¬π' s)) =·µê[Œº] 0 :=
-- begin
--   split,
--   { intro h, obtain ‚ü®t, hst, mt, ht‚ü© := exists_is_measurable_superset_of_measure_eq_zero h,
--     simp_rw [measure_prod_null_of_is_measurable mt] at ht,
--     rw [eventually_le_antisymm_iff],
--     exact ‚ü®eventually_le.trans_eq
--       (eventually_of_forall $ Œª x, (measure_mono (preimage_mono hst) : _)) ht,
--       eventually_of_forall $ Œª x, zero_le _‚ü© },
--   { intro h, obtain ‚ü®t, hst, mt, ht‚ü© := exists_is_measurable_superset_of_measure_eq_zero h,
--     dsimp [set_of_compl, ‚Üê ne.def] at hst,
--     have : (Œº.prod ŒΩ) (t.prod univ) = 0,
--     { simp_rw [prod_prod mt is_measurable.univ, ht, zero_mul] },
--     refine measure_mono_null _ this, rintro ‚ü®x, y‚ü© hxy, refine ‚ü®hst _, mem_univ y‚ü©, sorry
--      }
-- end

-- lemma ae_prod [sigma_finite Œº] [sigma_finite ŒΩ] {p : Œ± √ó Œ≤ ‚Üí Prop} :
--   (‚àÄ·µê z ‚àÇŒº.prod ŒΩ, p z) ‚Üî ‚àÄ·µê x ‚àÇ Œº, ‚àÄ·µê y ‚àÇ ŒΩ, p (x, y) :=
-- begin
--   exact measure_prod_null,
-- end

variables {E' : Type*} [measurable_space E'] [normed_group E'] [borel_space E'] [complete_space E']
  [normed_space ‚Ñù E'] [second_countable_topology E']

lemma integral_fn_integral_add [sigma_finite Œº] [sigma_finite ŒΩ] ‚¶Éf g : Œ± √ó Œ≤ ‚Üí E‚¶Ñ
  {F : E ‚Üí E'} (hF : measurable F)
  (hf : integrable f (Œº.prod ŒΩ))
  (hg : integrable g (Œº.prod ŒΩ)) :
  ‚à´ x, F (‚à´ y, f (x, y) + g (x, y) ‚àÇŒΩ) ‚àÇŒº = ‚à´ x, F (‚à´ y, f (x, y) ‚àÇŒΩ + ‚à´ y, g (x, y) ‚àÇŒΩ) ‚àÇŒº :=
begin
  refine integral_congr_ae
    (hF.comp (hf.add hg).measurable.integral_prod_right')
    (hF.comp (hf.measurable.integral_prod_right'.add hg.measurable.integral_prod_right')) _,
  refine hg.prod_right_ae.mp _, refine hf.prod_right_ae.mp _,
  apply eventually_of_forall, intros x h2f h2g, simp [integral_add h2f h2g]
end

lemma integral_fn_integral_sub [sigma_finite Œº] [sigma_finite ŒΩ] ‚¶Éf g : Œ± √ó Œ≤ ‚Üí E‚¶Ñ
  {F : E ‚Üí E'} (hF : measurable F)
  (hf : integrable f (Œº.prod ŒΩ))
  (hg : integrable g (Œº.prod ŒΩ)) :
  ‚à´ x, F (‚à´ y, f (x, y) - g (x, y) ‚àÇŒΩ) ‚àÇŒº = ‚à´ x, F (‚à´ y, f (x, y) ‚àÇŒΩ - ‚à´ y, g (x, y) ‚àÇŒΩ) ‚àÇŒº :=
begin
  refine integral_congr_ae
    (hF.comp (hf.sub hg).measurable.integral_prod_right')
    (hF.comp (hf.measurable.integral_prod_right'.sub hg.measurable.integral_prod_right')) _,
  refine hg.prod_right_ae.mp _, refine hf.prod_right_ae.mp _,
  apply eventually_of_forall, intros x h2f h2g, simp [integral_sub h2f h2g]
end

lemma lintegral_fn_integral_sub [sigma_finite Œº] [sigma_finite ŒΩ] ‚¶Éf g : Œ± √ó Œ≤ ‚Üí E‚¶Ñ
  (F : E ‚Üí ennreal) (hf : integrable f (Œº.prod ŒΩ)) (hg : integrable g (Œº.prod ŒΩ)) :
  ‚à´‚Åª x, F (‚à´ y, f (x, y) - g (x, y) ‚àÇŒΩ) ‚àÇŒº = ‚à´‚Åª x, F (‚à´ y, f (x, y) ‚àÇŒΩ - ‚à´ y, g (x, y) ‚àÇŒΩ) ‚àÇŒº :=
begin
  refine lintegral_congr_ae _,
  refine hg.prod_right_ae.mp _, refine hf.prod_right_ae.mp _,
  apply eventually_of_forall, intros x h2f h2g, simp [integral_sub h2f h2g]
end

lemma integral_integral_add [sigma_finite Œº] [sigma_finite ŒΩ] ‚¶Éf g : Œ± √ó Œ≤ ‚Üí E‚¶Ñ
  (hf : integrable f (Œº.prod ŒΩ))
  (hg : integrable g (Œº.prod ŒΩ)) :
  ‚à´ x, ‚à´ y, f (x, y) + g (x, y) ‚àÇŒΩ ‚àÇŒº = ‚à´ x, ‚à´ y, f (x, y) ‚àÇŒΩ + ‚à´ y, g (x, y) ‚àÇŒΩ ‚àÇŒº :=
integral_fn_integral_add measurable_id hf hg

lemma integral_integral_add' [sigma_finite Œº] [sigma_finite ŒΩ] ‚¶Éf g : Œ± √ó Œ≤ ‚Üí E‚¶Ñ
  (hf : integrable f (Œº.prod ŒΩ))
  (hg : integrable g (Œº.prod ŒΩ)) :
  ‚à´ x, ‚à´ y, (f + g) (x, y) ‚àÇŒΩ ‚àÇŒº = ‚à´ x, ‚à´ y, f (x, y) ‚àÇŒΩ + ‚à´ y, g (x, y) ‚àÇŒΩ ‚àÇŒº :=
integral_integral_add hf hg

lemma integral_integral_sub [sigma_finite Œº] [sigma_finite ŒΩ] ‚¶Éf g : Œ± √ó Œ≤ ‚Üí E‚¶Ñ
  (hf : integrable f (Œº.prod ŒΩ))
  (hg : integrable g (Œº.prod ŒΩ)) :
  ‚à´ x, ‚à´ y, f (x, y) - g (x, y) ‚àÇŒΩ ‚àÇŒº = ‚à´ x, ‚à´ y, f (x, y) ‚àÇŒΩ - ‚à´ y, g (x, y) ‚àÇŒΩ ‚àÇŒº :=
integral_fn_integral_sub measurable_id hf hg

lemma integral_integral_sub' [sigma_finite Œº] [sigma_finite ŒΩ] ‚¶Éf g : Œ± √ó Œ≤ ‚Üí E‚¶Ñ
  (hf : integrable f (Œº.prod ŒΩ))
  (hg : integrable g (Œº.prod ŒΩ)) :
  ‚à´ x, ‚à´ y, (f - g) (x, y) ‚àÇŒΩ ‚àÇŒº = ‚à´ x, ‚à´ y, f (x, y) ‚àÇŒΩ - ‚à´ y, g (x, y) ‚àÇŒΩ ‚àÇŒº :=
integral_integral_sub hf hg

lemma continuous_integral_integral [sigma_finite Œº] [sigma_finite ŒΩ] :
  continuous (Œª (f : Œ± √ó Œ≤ ‚Üí‚ÇÅ[Œº.prod ŒΩ] E), ‚à´ x, ‚à´ y, f (x, y) ‚àÇŒΩ ‚àÇŒº) :=
begin
  rw [continuous_iff_continuous_at], intro g,
  refine tendsto_integral_of_l1 _ g.integrable.integral_prod_left
    (eventually_of_forall $ Œª h, h.integrable.integral_prod_left) _,
  simp_rw [edist_eq_coe_nnnorm_sub,
    ‚Üê lintegral_fn_integral_sub (Œª x, (nnnorm x : ennreal)) (l1.integrable _) g.integrable],
  refine tendsto_of_tendsto_of_tendsto_of_le_of_le tendsto_const_nhds _ (Œª i, zero_le _) _,
  { exact Œª i, ‚à´‚Åª x, ‚à´‚Åª y, ennreal.of_real (‚à•i (x, y) - g (x, y)‚à•) ‚àÇŒΩ ‚àÇŒº },
  swap, { exact Œª i, lintegral_mono (Œª x, ennnorm_integral_le_lintegral_norm _) },
  simp_rw [of_real_norm_eq_coe_nnnorm],
  show tendsto (Œª (i : Œ± √ó Œ≤ ‚Üí‚ÇÅ[Œº.prod ŒΩ] E),
    ‚à´‚Åª x, ‚à´‚Åª (y : Œ≤), nnnorm (i (x, y) - g (x, y)) ‚àÇŒΩ ‚àÇŒº) (ùìù g) (ùìù 0),
  have : ‚àÄ (i : Œ± √ó Œ≤ ‚Üí‚ÇÅ[Œº.prod ŒΩ] E), measurable (Œª z, (nnnorm (i z - g z) : ennreal)) :=
  Œª i, (i.measurable.sub g.measurable).ennnorm,
  simp_rw [‚Üê lintegral_prod _ (this _), ‚Üê l1.of_real_norm_sub_eq_lintegral,
    ‚Üê ennreal.of_real_zero],
  refine (ennreal.continuous_of_real.tendsto 0).comp _,
  rw [‚Üê tendsto_iff_norm_tendsto_zero], exact tendsto_id
end

/-- Fubini's Theorem: For integrable functions on `Œ± √ó Œ≤`,
  the Bochner integral of `f` is equal to the iterated Bochner integral. -/
lemma integral_prod [t2_space E] [sigma_finite Œº] [sigma_finite ŒΩ] :
  ‚àÄ ‚¶Éf : Œ± √ó Œ≤ ‚Üí E‚¶Ñ (hf : integrable f (Œº.prod ŒΩ)),
  ‚à´ z, f z ‚àÇ(Œº.prod ŒΩ) = ‚à´ x, ‚à´ y, f (x, y) ‚àÇŒΩ ‚àÇŒº :=
begin
  apply integrable.induction,
  { intros c s hs h2s, simp_rw [integral_indicator measurable_const hs, ‚Üê indicator_comp_right,
      function.comp, integral_indicator measurable_const (measurable_prod_mk_left hs),
      set_integral_const], rw [integral_smul_const (integrable_measure_prod_mk_left hs h2s)],
      simp_rw [integral_to_real hs.measure_prod_mk_left (ae_measure_lt_top hs h2s), prod_apply hs] },
  { intros f g hfg i_f i_g hf hg,
    simp_rw [integral_add' i_f i_g, hf, hg,
      ‚Üê integral_add i_f.integral_prod_left i_g.integral_prod_left,
      integral_integral_add' i_f i_g] },
  { exact is_closed_eq continuous_integral continuous_integral_integral },
  { intros f g hfg i_f m_g hf, convert hf using 1,
    { exact integral_congr_ae m_g i_f.measurable hfg.symm },
    { refine integral_congr_ae m_g.integral_prod_right' i_f.measurable.integral_prod_right' _,
      rw [eventually_eq] at hfg, refine (ae_prod hfg).mp _,
      apply eventually_of_forall, intros x hfgx,
      refine integral_congr_ae (m_g.comp measurable_prod_mk_left)
        (i_f.measurable.comp measurable_prod_mk_left) (ae_eq_symm hfgx) } }
end

end measure_theory
